{"version":3,"file":"cache.service.js","sourceRoot":"","sources":["../../../.ng_build/cache/src/cache.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as moment from 'moment';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { tap, map } from 'rxjs/operators';\r\nimport { DC_STORE_STORAGE_TOKEN, ICacheStore, ICache } from './interface';\r\nimport { DC_OPTIONS_TOKEN, CacheOptions } from '../cache.options';\r\n\r\n@Injectable()\r\nexport class CacheService implements OnDestroy {\r\n    private readonly memory: Map<string, ICache> = new Map<string, ICache>();\r\n    private meta: Set<string> = new Set<string>();\r\n\r\n    constructor(\r\n        @Inject(DC_OPTIONS_TOKEN) private options: CacheOptions,\r\n        @Inject(DC_STORE_STORAGE_TOKEN) private store: ICacheStore,\r\n        private http: HttpClient\r\n    ) {\r\n        this.loadMeta();\r\n    }\r\n\r\n    private deepGet(obj: any, path: string[], defaultValue: any) {\r\n        if (!obj) return defaultValue;\r\n        if (path.length <= 1) {\r\n            const checkObj = path.length ? obj[path[0]] : obj;\r\n            return typeof checkObj === 'undefined' ? defaultValue : checkObj;\r\n        }\r\n        return path.reduce((o, k) => (o || {})[k], obj) || defaultValue;\r\n    }\r\n\r\n    // region: meta\r\n\r\n    private pushMeta(key: string) {\r\n        if (this.meta.has(key)) return;\r\n        this.meta.add(key);\r\n        this.saveMeta();\r\n    }\r\n\r\n    private removeMeta(key: string) {\r\n        if (!this.meta.has(key)) return;\r\n        this.meta.delete(key);\r\n        this.saveMeta();\r\n    }\r\n\r\n    private loadMeta() {\r\n        const ret = this.store.get(this.options.meta_key);\r\n        if (ret && ret.v) {\r\n            (ret.v as string[]).forEach(key => this.meta.add(key));\r\n        }\r\n    }\r\n\r\n    private saveMeta() {\r\n        const metaData: string[] = [];\r\n        this.meta.forEach(key => metaData.push(key));\r\n        this.store.set(this.options.meta_key, { v: metaData, e: 0 });\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region: set\r\n\r\n    /**\r\n     * 持久化缓存 `Observable` 对象，例如：\r\n     * - `set('data/1', this.http.get('data/1')).subscribe()`\r\n     * - `set('data/1', this.http.get('data/1'), { expire: '10s' }).subscribe()`\r\n     */\r\n    set(\r\n        key: string,\r\n        data: Observable<any>,\r\n        options?: { type?: 's', expire?: string }\r\n    ): Observable<any>;\r\n    /**\r\n     * 持久化缓存基础对象，例如：\r\n     * - `set('data/1', 1)`\r\n     * - `set('data/1', 1, { expire: '10s' })`\r\n     */\r\n    set(\r\n        key: string,\r\n        data: Object,\r\n        options?: { type?: 's', expire?: string }\r\n    ): void;\r\n    /**\r\n     * 指定缓存类型进行缓存对象，例如内存缓存：\r\n     * - `set('data/1', 1, { type: 'm' })`\r\n     * - `set('data/1', 1, { type: 'm', expire: '10s' })`\r\n     */\r\n    set(\r\n        key: string,\r\n        data: Object,\r\n        options: { type: 'm' | 's', expire?: string }\r\n    ): void;\r\n    /**\r\n     * 缓存对象\r\n     */\r\n    set(\r\n        key: string,\r\n        data: any | Observable<any>,\r\n        options: {\r\n            /** 存储类型，'m' 表示内存，'s' 表示持久 */\r\n            type?: 'm' | 's';\r\n            /**\r\n             * 过期时间，例如：`10s` 10秒，单位值等同 http://momentjs.cn/docs/#/manipulating/add/\r\n             */\r\n            expire?: string;\r\n        } = {}\r\n    ): any {\r\n        // expire\r\n        let e = 0;\r\n        if (options.expire && options.expire.length > 1) {\r\n            const vn = options.expire.split(/(\\d+)/).filter(Boolean);\r\n            e = moment().add(\r\n                +vn[0],\r\n                <moment.unitOfTime.DurationConstructor>vn[1]\r\n            ).unix();\r\n        }\r\n        if (!(data instanceof Observable)) {\r\n            this.save(options.type, key, { v: data, e });\r\n            return;\r\n        }\r\n        return data.pipe(tap((v: any) => {\r\n            this.save(options.type, key, { v, e });\r\n        }));\r\n    }\r\n\r\n    private save(type: 'm' | 's', key: string, value: ICache) {\r\n        if (type === 'm') {\r\n            this.memory.set(key, value);\r\n        } else {\r\n            this.store.set(this.options.prefix + key, value);\r\n            this.pushMeta(key);\r\n        }\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region: get\r\n\r\n    /** 获取缓存数据，若 `key` 则 `key` 作为HTTP请求缓存后返回 */\r\n    get(\r\n        key: string,\r\n        options?: {\r\n            mode: 'promise',\r\n            type?: 'm' | 's',\r\n            expire?: string\r\n        }\r\n    ): Observable<any>;\r\n    /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\r\n    get(\r\n        key: string,\r\n        options: {\r\n            mode: 'none',\r\n            type?: 'm' | 's',\r\n            expire?: string\r\n        }\r\n    ): any;\r\n    get(\r\n        key: string,\r\n        options: {\r\n            mode?: 'promise' | 'none',\r\n            type?: 'm' | 's',\r\n            expire?: string\r\n        } = {}\r\n    ): Observable<any> | any {\r\n        const value: ICache = this.memory.has(key) ? this.memory.get(key) : this.store.get(this.options.prefix + key);\r\n        if (!value || (value.e && value.e > 0 && value.e < moment().unix())) {\r\n            if (options.mode !== 'none' && this.options.mode === 'promise') {\r\n                return this.http.get(key).pipe(\r\n                    map((ret: any) => this.deepGet(ret, this.options.reName as string[], null)),\r\n                    tap(v => this.set(key, v))\r\n                );\r\n            }\r\n            return null;\r\n        }\r\n\r\n        return value.v;\r\n    }\r\n\r\n    /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\r\n    getNone(key: string): any {\r\n        return this.get(key, { mode: 'none' });\r\n    }\r\n\r\n    /**\r\n     * 获取缓存，若不存在则设置持久化缓存 `Observable` 对象\r\n     */\r\n    tryGet(\r\n        key: string,\r\n        data: Observable<any>,\r\n        options?: { type?: 's', expire?: string }\r\n    ): Observable<any>;\r\n    /**\r\n     * 获取缓存，若不存在则设置持久化缓存基础对象\r\n     */\r\n    tryGet(\r\n        key: string,\r\n        data: Object,\r\n        options?: { type?: 's', expire?: string }\r\n    ): any;\r\n    /**\r\n     * 获取缓存，若不存在则设置指定缓存类型进行缓存对象\r\n     */\r\n    tryGet(\r\n        key: string,\r\n        data: Object,\r\n        options: { type: 'm' | 's', expire?: string }\r\n    ): any;\r\n\r\n    /**\r\n     * 获取缓存，若不存在则设置缓存对象\r\n     */\r\n    tryGet(\r\n        key: string,\r\n        data: any | Observable<any>,\r\n        options: {\r\n            /** 存储类型，'m' 表示内存，'s' 表示持久 */\r\n            type?: 'm' | 's';\r\n            /**\r\n             * 过期时间，例如：`10s` 10秒，单位值等同 http://momentjs.cn/docs/#/manipulating/add/\r\n             */\r\n            expire?: string;\r\n        } = {}\r\n    ): any {\r\n        const ret = this.getNone(key);\r\n        if (ret === null) {\r\n            if (!(data instanceof Observable)) {\r\n                this.set(key, data, <any>options);\r\n                return data;\r\n            }\r\n\r\n            return this.set(key, data as Observable<any>, <any>options);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region: has\r\n\r\n    /** 是否缓存 `key` */\r\n    has(key: string): boolean {\r\n        return this.memory.has(key) || this.meta.has(key);\r\n    }\r\n\r\n    // endregion\r\n\r\n    // region: remove\r\n\r\n    /** 移除缓存 */\r\n    remove(key: string) {\r\n        if (this.memory.has(key)) {\r\n            this.memory.delete(key);\r\n            return ;\r\n        }\r\n        this.store.remove(this.options.prefix + key);\r\n        this.removeMeta(key);\r\n    }\r\n\r\n    /** 清空所有缓存 */\r\n    clear() {\r\n        this.memory.clear();\r\n        this.meta.forEach(key => this.store.remove(this.options.prefix + key));\r\n    }\r\n\r\n    // endregion\r\n\r\n    ngOnDestroy(): void {\r\n        this.memory.clear();\r\n    }\r\n\r\n}\r\n"]}