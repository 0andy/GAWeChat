import { OnDestroy } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { ICacheStore } from './interface';
import { CacheOptions } from '../cache.options';
export declare class CacheService implements OnDestroy {
    private options;
    private store;
    private http;
    private readonly memory;
    private meta;
    constructor(options: CacheOptions, store: ICacheStore, http: HttpClient);
    private deepGet(obj, path, defaultValue);
    private pushMeta(key);
    private removeMeta(key);
    private loadMeta();
    private saveMeta();
    /**
     * 持久化缓存 `Observable` 对象，例如：
     * - `set('data/1', this.http.get('data/1')).subscribe()`
     * - `set('data/1', this.http.get('data/1'), { expire: '10s' }).subscribe()`
     */
    set(key: string, data: Observable<any>, options?: {
        type?: 's';
        expire?: string;
    }): Observable<any>;
    /**
     * 持久化缓存基础对象，例如：
     * - `set('data/1', 1)`
     * - `set('data/1', 1, { expire: '10s' })`
     */
    set(key: string, data: Object, options?: {
        type?: 's';
        expire?: string;
    }): void;
    /**
     * 指定缓存类型进行缓存对象，例如内存缓存：
     * - `set('data/1', 1, { type: 'm' })`
     * - `set('data/1', 1, { type: 'm', expire: '10s' })`
     */
    set(key: string, data: Object, options: {
        type: 'm' | 's';
        expire?: string;
    }): void;
    private save(type, key, value);
    /** 获取缓存数据，若 `key` 则 `key` 作为HTTP请求缓存后返回 */
    get(key: string, options?: {
        mode: 'promise';
        type?: 'm' | 's';
        expire?: string;
    }): Observable<any>;
    /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */
    get(key: string, options: {
        mode: 'none';
        type?: 'm' | 's';
        expire?: string;
    }): any;
    /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */
    getNone(key: string): any;
    /**
     * 获取缓存，若不存在则设置持久化缓存 `Observable` 对象
     */
    tryGet(key: string, data: Observable<any>, options?: {
        type?: 's';
        expire?: string;
    }): Observable<any>;
    /**
     * 获取缓存，若不存在则设置持久化缓存基础对象
     */
    tryGet(key: string, data: Object, options?: {
        type?: 's';
        expire?: string;
    }): any;
    /**
     * 获取缓存，若不存在则设置指定缓存类型进行缓存对象
     */
    tryGet(key: string, data: Object, options: {
        type: 'm' | 's';
        expire?: string;
    }): any;
    /** 是否缓存 `key` */
    has(key: string): boolean;
    /** 移除缓存 */
    remove(key: string): void;
    /** 清空所有缓存 */
    clear(): void;
    ngOnDestroy(): void;
}
