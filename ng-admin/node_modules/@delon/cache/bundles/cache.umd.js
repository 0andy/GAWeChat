(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('moment'), require('rxjs/Observable'), require('rxjs/operators')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common/http', 'moment', 'rxjs/Observable', 'rxjs/operators'], factory) :
	(factory((global.alain = global.alain || {}, global.alain.cache = {}),global.ng.core,global.ng.common.http,global.moment,global.Rx,global.Rx.Observable.prototype));
}(this, (function (exports,core,http,moment,Observable,operators) { 'use strict';

moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

var DC_STORE_STORAGE_TOKEN = new core.InjectionToken('DC_STORE_STORAGE_TOKEN');

var DC_OPTIONS_TOKEN = new core.InjectionToken('DC_OPTIONS_TOKEN');
var DC_USER_OPTIONS_TOKEN = new core.InjectionToken('DC_USER_OPTIONS_TOKEN');
var DEFAULT = {
    mode: 'promise',
    reName: '',
    prefix: '',
    meta_key: '__cache_meta'
};

var CacheService = /** @class */ (function () {
    function CacheService(options, store, http$$1) {
        this.options = options;
        this.store = store;
        this.http = http$$1;
        this.memory = new Map();
        this.meta = new Set();
        this.loadMeta();
    }
    CacheService.prototype.deepGet = function (obj, path, defaultValue) {
        if (!obj)
            return defaultValue;
        if (path.length <= 1) {
            var checkObj = path.length ? obj[path[0]] : obj;
            return typeof checkObj === 'undefined' ? defaultValue : checkObj;
        }
        return path.reduce(function (o, k) { return (o || {})[k]; }, obj) || defaultValue;
    };
    // region: meta
    // region: meta
    CacheService.prototype.pushMeta = 
    // region: meta
    function (key) {
        if (this.meta.has(key))
            return;
        this.meta.add(key);
        this.saveMeta();
    };
    CacheService.prototype.removeMeta = function (key) {
        if (!this.meta.has(key))
            return;
        this.meta.delete(key);
        this.saveMeta();
    };
    CacheService.prototype.loadMeta = function () {
        var _this = this;
        var ret = this.store.get(this.options.meta_key);
        if (ret && ret.v) {
            ret.v.forEach(function (key) { return _this.meta.add(key); });
        }
    };
    CacheService.prototype.saveMeta = function () {
        var metaData = [];
        this.meta.forEach(function (key) { return metaData.push(key); });
        this.store.set(this.options.meta_key, { v: metaData, e: 0 });
    };
    /**
     * 缓存对象
     */
    /**
         * 缓存对象
         */
    CacheService.prototype.set = /**
         * 缓存对象
         */
    function (key, data, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        // expire
        var e = 0;
        if (options.expire && options.expire.length > 1) {
            var vn = options.expire.split(/(\d+)/).filter(Boolean);
            e = moment().add(+vn[0], vn[1]).unix();
        }
        if (!(data instanceof Observable.Observable)) {
            this.save(options.type, key, { v: data, e: e });
            return;
        }
        return data.pipe(operators.tap(function (v) {
            _this.save(options.type, key, { v: v, e: e });
        }));
    };
    CacheService.prototype.save = function (type, key, value) {
        if (type === 'm') {
            this.memory.set(key, value);
        }
        else {
            this.store.set(this.options.prefix + key, value);
            this.pushMeta(key);
        }
    };
    CacheService.prototype.get = function (key, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var value = this.memory.has(key) ? this.memory.get(key) : this.store.get(this.options.prefix + key);
        if (!value || (value.e && value.e > 0 && value.e < moment().unix())) {
            if (options.mode !== 'none' && this.options.mode === 'promise') {
                return this.http.get(key).pipe(operators.map(function (ret) { return _this.deepGet(ret, _this.options.reName, null); }), operators.tap(function (v) { return _this.set(key, v); }));
            }
            return null;
        }
        return value.v;
    };
    /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */
    /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */
    CacheService.prototype.getNone = /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */
    function (key) {
        return this.get(key, { mode: 'none' });
    };
    /**
     * 获取缓存，若不存在则设置缓存对象
     */
    /**
         * 获取缓存，若不存在则设置缓存对象
         */
    CacheService.prototype.tryGet = /**
         * 获取缓存，若不存在则设置缓存对象
         */
    function (key, data, options) {
        if (options === void 0) { options = {}; }
        var ret = this.getNone(key);
        if (ret === null) {
            if (!(data instanceof Observable.Observable)) {
                this.set(key, data, options);
                return data;
            }
            return this.set(key, data, options);
        }
        return ret;
    };
    // endregion
    // region: has
    /** 是否缓存 `key` */
    // endregion
    // region: has
    /** 是否缓存 `key` */
    CacheService.prototype.has = 
    // endregion
    // region: has
    /** 是否缓存 `key` */
    function (key) {
        return this.memory.has(key) || this.meta.has(key);
    };
    // endregion
    // region: remove
    /** 移除缓存 */
    // endregion
    // region: remove
    /** 移除缓存 */
    CacheService.prototype.remove = 
    // endregion
    // region: remove
    /** 移除缓存 */
    function (key) {
        if (this.memory.has(key)) {
            this.memory.delete(key);
            return;
        }
        this.store.remove(this.options.prefix + key);
        this.removeMeta(key);
    };
    /** 清空所有缓存 */
    /** 清空所有缓存 */
    CacheService.prototype.clear = /** 清空所有缓存 */
    function () {
        var _this = this;
        this.memory.clear();
        this.meta.forEach(function (key) { return _this.store.remove(_this.options.prefix + key); });
    };
    // endregion
    // endregion
    CacheService.prototype.ngOnDestroy = 
    // endregion
    function () {
        this.memory.clear();
    };
    CacheService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    CacheService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [DC_OPTIONS_TOKEN,] },] },
        { type: undefined, decorators: [{ type: core.Inject, args: [DC_STORE_STORAGE_TOKEN,] },] },
        { type: http.HttpClient, },
    ]; };
    return CacheService;
}());

var LocalStorageCacheService = /** @class */ (function () {
    function LocalStorageCacheService() {
    }
    LocalStorageCacheService.prototype.get = function (key) {
        return JSON.parse(localStorage.getItem(key) || 'null') || null;
    };
    LocalStorageCacheService.prototype.set = function (key, value) {
        localStorage.setItem(key, JSON.stringify(value));
        return true;
    };
    LocalStorageCacheService.prototype.remove = function (key) {
        localStorage.removeItem(key);
    };
    return LocalStorageCacheService;
}());

// endregion
function optionsFactory(options) {
    if (options && !Array.isArray(options.reName))
        options.reName = options.reName.split('.');
    return Object.assign(DEFAULT, options);
}
var DelonCacheModule = /** @class */ (function () {
    function DelonCacheModule() {
    }
    DelonCacheModule.forRoot = function (options) {
        return {
            ngModule: DelonCacheModule,
            providers: [
                { provide: DC_USER_OPTIONS_TOKEN, useValue: options },
                { provide: DC_OPTIONS_TOKEN, useFactory: optionsFactory, deps: [DC_USER_OPTIONS_TOKEN] },
                { provide: DC_STORE_STORAGE_TOKEN, useClass: LocalStorageCacheService },
                CacheService
            ]
        };
    };
    DelonCacheModule.decorators = [
        { type: core.NgModule, args: [{},] },
    ];
    /** @nocollapse */
    DelonCacheModule.ctorParameters = function () { return []; };
    return DelonCacheModule;
}());

exports.optionsFactory = optionsFactory;
exports.DelonCacheModule = DelonCacheModule;
exports.DC_STORE_STORAGE_TOKEN = DC_STORE_STORAGE_TOKEN;
exports.CacheService = CacheService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
