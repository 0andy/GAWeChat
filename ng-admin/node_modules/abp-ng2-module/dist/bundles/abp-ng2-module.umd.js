(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/http'), require('rxjs/Observable'), require('rxjs/add/operator/catch'), require('rxjs/add/operator/map')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/http', 'rxjs/Observable', 'rxjs/add/operator/catch', 'rxjs/add/operator/map'], factory) :
    (factory((global.ng = global.ng || {}, global.ng.abpModule = global.ng.abpModule || {}),global.ng.core,global._angular_http,global.rxjs_Observable,global.rxjs_add_operator_catch,global.rxjs_add_operator_map));
}(this, (function (exports,_angular_core,_angular_http,rxjs_Observable,rxjs_add_operator_catch,rxjs_add_operator_map) { 'use strict';

var AbpSessionService = (function () {
    function AbpSessionService() {
    }
    Object.defineProperty(AbpSessionService.prototype, "userId", {
        get: function () {
            return abp.session.userId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbpSessionService.prototype, "tenantId", {
        get: function () {
            return abp.session.tenantId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbpSessionService.prototype, "impersonatorUserId", {
        get: function () {
            return abp.session.impersonatorUserId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbpSessionService.prototype, "impersonatorTenantId", {
        get: function () {
            return abp.session.impersonatorTenantId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbpSessionService.prototype, "multiTenancySide", {
        get: function () {
            return abp.session.multiTenancySide;
        },
        enumerable: true,
        configurable: true
    });
    AbpSessionService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    AbpSessionService.ctorParameters = function () { return []; };
    return AbpSessionService;
}());

var PermissionCheckerService = (function () {
    function PermissionCheckerService() {
    }
    PermissionCheckerService.prototype.isGranted = function (permissionName) {
        return abp.auth.isGranted(permissionName);
    };
    PermissionCheckerService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    PermissionCheckerService.ctorParameters = function () { return []; };
    return PermissionCheckerService;
}());

var FeatureCheckerService = (function () {
    function FeatureCheckerService() {
    }
    FeatureCheckerService.prototype.get = function (featureName) {
        return abp.features.get(featureName);
    };
    FeatureCheckerService.prototype.getValue = function (featureName) {
        return abp.features.getValue(featureName);
    };
    FeatureCheckerService.prototype.isEnabled = function (featureName) {
        return abp.features.isEnabled(featureName);
    };
    FeatureCheckerService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    FeatureCheckerService.ctorParameters = function () { return []; };
    return FeatureCheckerService;
}());

var LocalizationService = (function () {
    function LocalizationService() {
    }
    Object.defineProperty(LocalizationService.prototype, "languages", {
        get: function () {
            return abp.localization.languages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LocalizationService.prototype, "currentLanguage", {
        get: function () {
            return abp.localization.currentLanguage;
        },
        enumerable: true,
        configurable: true
    });
    LocalizationService.prototype.localize = function (key, sourceName) {
        return abp.localization.localize(key, sourceName);
    };
    LocalizationService.prototype.getSource = function (sourceName) {
        return abp.localization.getSource(sourceName);
    };
    LocalizationService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    LocalizationService.ctorParameters = function () { return []; };
    return LocalizationService;
}());

var SettingService = (function () {
    function SettingService() {
    }
    SettingService.prototype.get = function (name) {
        return abp.setting.get(name);
    };
    SettingService.prototype.getBoolean = function (name) {
        return abp.setting.getBoolean(name);
    };
    SettingService.prototype.getInt = function (name) {
        return abp.setting.getInt(name);
    };
    SettingService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    SettingService.ctorParameters = function () { return []; };
    return SettingService;
}());

var NotifyService = (function () {
    function NotifyService() {
    }
    NotifyService.prototype.info = function (message, title, options) {
        abp.notify.info(message, title, options);
    };
    NotifyService.prototype.success = function (message, title, options) {
        abp.notify.success(message, title, options);
    };
    NotifyService.prototype.warn = function (message, title, options) {
        abp.notify.warn(message, title, options);
    };
    NotifyService.prototype.error = function (message, title, options) {
        abp.notify.error(message, title, options);
    };
    NotifyService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    NotifyService.ctorParameters = function () { return []; };
    return NotifyService;
}());

var MessageService = (function () {
    function MessageService() {
    }
    MessageService.prototype.info = function (message, title) {
        return abp.message.info(message, title);
    };
    MessageService.prototype.success = function (message, title) {
        return abp.message.success(message, title);
    };
    MessageService.prototype.warn = function (message, title) {
        return abp.message.warn(message, title);
    };
    MessageService.prototype.error = function (message, title) {
        return abp.message.error(message, title);
    };
    MessageService.prototype.confirm = function (message, titleOrCallBack, callback) {
        if (typeof titleOrCallBack == 'string') {
            return abp.message.confirm(message, titleOrCallBack, callback);
        }
        else {
            return abp.message.confirm(message, titleOrCallBack);
        }
    };
    MessageService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    MessageService.ctorParameters = function () { return []; };
    return MessageService;
}());

var LogService = (function () {
    function LogService() {
    }
    LogService.prototype.debug = function (logObject) {
        abp.log.debug(logObject);
    };
    LogService.prototype.info = function (logObject) {
        abp.log.info(logObject);
    };
    LogService.prototype.warn = function (logObject) {
        abp.log.warn(logObject);
    };
    LogService.prototype.error = function (logObject) {
        abp.log.error(logObject);
    };
    LogService.prototype.fatal = function (logObject) {
        abp.log.fatal(logObject);
    };
    LogService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    LogService.ctorParameters = function () { return []; };
    return LogService;
}());

var AbpMultiTenancyService = (function () {
    function AbpMultiTenancyService() {
    }
    Object.defineProperty(AbpMultiTenancyService.prototype, "isEnabled", {
        get: function () {
            return abp.multiTenancy.isEnabled;
        },
        enumerable: true,
        configurable: true
    });
    AbpMultiTenancyService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    AbpMultiTenancyService.ctorParameters = function () { return []; };
    return AbpMultiTenancyService;
}());

var TokenService = (function () {
    function TokenService() {
    }
    TokenService.prototype.getToken = function () {
        return abp.auth.getToken();
    };
    TokenService.prototype.getTokenCookieName = function () {
        return abp.auth.tokenCookieName;
    };
    TokenService.prototype.clearToken = function () {
        abp.auth.clearToken();
    };
    TokenService.prototype.setToken = function (authToken, expireDate) {
        abp.auth.setToken(authToken, expireDate);
    };
    TokenService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    TokenService.ctorParameters = function () { return []; };
    return TokenService;
}());

var UtilsService = (function () {
    function UtilsService() {
    }
    UtilsService.prototype.getCookieValue = function (key) {
        return abp.utils.getCookieValue(key);
    };
    UtilsService.prototype.setCookieValue = function (key, value, expireDate, path) {
        abp.utils.setCookieValue(key, value, expireDate, path);
    };
    UtilsService.prototype.deleteCookie = function (key, path) {
        abp.utils.deleteCookie(key, path);
    };
    UtilsService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    UtilsService.ctorParameters = function () { return []; };
    return UtilsService;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var AbpHttpConfiguration = (function () {
    function AbpHttpConfiguration(_messageService, _logService) {
        this._messageService = _messageService;
        this._logService = _logService;
        this.defaultError = {
            message: 'An error has occurred!',
            details: 'Error detail not sent by server.'
        };
        this.defaultError401 = {
            message: 'You are not authenticated!',
            details: 'You should be authenticated (sign in) in order to perform this operation.'
        };
        this.defaultError403 = {
            message: 'You are not authorized!',
            details: 'You are not allowed to perform this operation.'
        };
        this.defaultError404 = {
            message: 'Resource not found!',
            details: 'The resource requested could not found on the server.'
        };
    }
    AbpHttpConfiguration.prototype.logError = function (error) {
        this._logService.error(error);
    };
    AbpHttpConfiguration.prototype.showError = function (error) {
        if (error.details) {
            return this._messageService.error(error.details, error.message || this.defaultError.message);
        }
        else {
            return this._messageService.error(error.message || this.defaultError.message);
        }
    };
    AbpHttpConfiguration.prototype.handleTargetUrl = function (targetUrl) {
        if (!targetUrl) {
            location.href = '/';
        }
        else {
            location.href = targetUrl;
        }
    };
    AbpHttpConfiguration.prototype.handleUnAuthorizedRequest = function (messagePromise, targetUrl) {
        var _this = this;
        var self = this;
        if (messagePromise) {
            messagePromise.done(function () {
                _this.handleTargetUrl(targetUrl || '/');
            });
        }
        else {
            self.handleTargetUrl(targetUrl || '/');
        }
    };
    AbpHttpConfiguration.prototype.handleNonAbpErrorResponse = function (response) {
        var self = this;
        switch (response.status) {
            case 401:
                self.handleUnAuthorizedRequest(self.showError(self.defaultError401), '/');
                break;
            case 403:
                self.showError(self.defaultError403);
                break;
            case 404:
                self.showError(self.defaultError404);
                break;
            default:
                self.showError(self.defaultError);
                break;
        }
    };
    AbpHttpConfiguration.prototype.handleAbpResponse = function (response, ajaxResponse) {
        var newResponse = new _angular_http.ResponseOptions({
            url: response.url,
            body: ajaxResponse,
            headers: response.headers,
            status: response.status,
            statusText: response.statusText,
            type: response.type
        });
        if (ajaxResponse.success) {
            newResponse.body = ajaxResponse.result;
            if (ajaxResponse.targetUrl) {
                this.handleTargetUrl(ajaxResponse.targetUrl);
                
            }
        }
        else {
            if (!ajaxResponse.error) {
                ajaxResponse.error = this.defaultError;
            }
            this.logError(ajaxResponse.error);
            this.showError(ajaxResponse.error);
            if (response.status === 401) {
                this.handleUnAuthorizedRequest(null, ajaxResponse.targetUrl);
            }
        }
        return new _angular_http.Response(newResponse);
    };
    AbpHttpConfiguration.prototype.getAbpAjaxResponseOrNull = function (response) {
        if (!response || !response.headers) {
            return null;
        }
        var contentType = response.headers.get('Content-Type');
        if (!contentType) {
            this._logService.warn('Content-Type is not sent!');
            return null;
        }
        if (contentType.indexOf("application/json") < 0) {
            this._logService.warn('Content-Type is not application/json: ' + contentType);
            return null;
        }
        var responseObj = response.json();
        if (!responseObj.__abp) {
            return null;
        }
        return responseObj;
    };
    AbpHttpConfiguration.prototype.handleResponse = function (response) {
        var ajaxResponse = this.getAbpAjaxResponseOrNull(response);
        if (ajaxResponse == null) {
            return response;
        }
        return this.handleAbpResponse(response, ajaxResponse);
    };
    AbpHttpConfiguration.prototype.handleError = function (error) {
        var ajaxResponse = this.getAbpAjaxResponseOrNull(error);
        if (ajaxResponse != null) {
            this.handleAbpResponse(error, ajaxResponse);
            return rxjs_Observable.Observable.throw(ajaxResponse.error);
        }
        else {
            this.handleNonAbpErrorResponse(error);
            return rxjs_Observable.Observable.throw('HTTP error: ' + error.status + ', ' + error.statusText);
        }
    };
    AbpHttpConfiguration.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    AbpHttpConfiguration.ctorParameters = function () { return [
        { type: MessageService, },
        { type: LogService, },
    ]; };
    return AbpHttpConfiguration;
}());
var AbpHttp = (function (_super) {
    __extends(AbpHttp, _super);
    function AbpHttp(backend, defaultOptions, configuration) {
        var _this = _super.call(this, backend, defaultOptions) || this;
        _this._tokenService = new TokenService();
        _this._utilsService = new UtilsService();
        _this.configuration = configuration;
        return _this;
    }
    AbpHttp.prototype.get = function (url, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        this.normalizeRequestOptions(options);
        return _super.prototype.get.call(this, url, options)
            .map(function (response) { return _this.configuration.handleResponse(response); })
            .catch(function (error) { return _this.configuration.handleError(error); });
    };
    AbpHttp.prototype.post = function (url, body, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        this.normalizeRequestOptions(options);
        return _super.prototype.post.call(this, url, body, options)
            .map(function (response) { return _this.configuration.handleResponse(response); })
            .catch(function (error) { return _this.configuration.handleError(error); });
    };
    AbpHttp.prototype.put = function (url, body, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        this.normalizeRequestOptions(options);
        return _super.prototype.put.call(this, url, body, options)
            .map(function (response) { return _this.configuration.handleResponse(response); })
            .catch(function (error) { return _this.configuration.handleError(error); });
    };
    AbpHttp.prototype.delete = function (url, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        this.normalizeRequestOptions(options);
        return _super.prototype.delete.call(this, url, options)
            .map(function (response) { return _this.configuration.handleResponse(response); })
            .catch(function (error) { return _this.configuration.handleError(error); });
    };
    AbpHttp.prototype.request = function (url, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        this.normalizeRequestOptions(options);
        return _super.prototype.request.call(this, url, options)
            .map(function (response) { return _this.configuration.handleResponse(response); })
            .catch(function (error) { return _this.configuration.handleError(error); });
    };
    AbpHttp.prototype.normalizeRequestOptions = function (options) {
        if (!options.headers) {
            options.headers = new _angular_http.Headers();
        }
        this.addXRequestedWithHeader(options);
        this.addAuthorizationHeaders(options);
        this.addAspNetCoreCultureHeader(options);
        this.addAcceptLanguageHeader(options);
        this.addTenantIdHeader(options);
    };
    AbpHttp.prototype.addXRequestedWithHeader = function (options) {
        if (options.headers) {
            options.headers.append('X-Requested-With', 'XMLHttpRequest');
        }
    };
    AbpHttp.prototype.addAspNetCoreCultureHeader = function (options) {
        var cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && options.headers && !options.headers.has('.AspNetCore.Culture')) {
            options.headers.append('.AspNetCore.Culture', cookieLangValue);
        }
    };
    AbpHttp.prototype.addAcceptLanguageHeader = function (options) {
        var cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && options.headers && !options.headers.has('Accept-Language')) {
            options.headers.append('Accept-Language', cookieLangValue);
        }
    };
    AbpHttp.prototype.addTenantIdHeader = function (options) {
        var cookieTenantIdValue = this._utilsService.getCookieValue('Abp.TenantId');
        if (cookieTenantIdValue && options.headers && !options.headers.has('Abp.TenantId')) {
            options.headers.append('Abp.TenantId', cookieTenantIdValue);
        }
    };
    AbpHttp.prototype.addAuthorizationHeaders = function (options) {
        var authorizationHeaders = options.headers ? options.headers.getAll('Authorization') : null;
        if (!authorizationHeaders) {
            authorizationHeaders = [];
        }
        if (!this.itemExists(authorizationHeaders, function (item) { return item.indexOf('Bearer ') == 0; })) {
            var token = this._tokenService.getToken();
            if (options.headers && token) {
                options.headers.append('Authorization', 'Bearer ' + token);
            }
        }
    };
    AbpHttp.prototype.itemExists = function (items, predicate) {
        for (var i = 0; i < items.length; i++) {
            if (predicate(items[i])) {
                return true;
            }
        }
        return false;
    };
    AbpHttp.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    AbpHttp.ctorParameters = function () { return [
        { type: _angular_http.XHRBackend, },
        { type: _angular_http.RequestOptions, },
        { type: AbpHttpConfiguration, },
    ]; };
    return AbpHttp;
}(_angular_http.Http));

var AbpUserConfigurationService = (function () {
    function AbpUserConfigurationService(_http) {
        this._http = _http;
    }
    AbpUserConfigurationService.prototype.initialize = function () {
        this._http.get('/AbpUserConfiguration/GetAll')
            .subscribe(function (result) {
            jQuery.extend(true, abp, result.json());
        });
    };
    AbpUserConfigurationService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    AbpUserConfigurationService.ctorParameters = function () { return [
        { type: _angular_http.Http, },
    ]; };
    return AbpUserConfigurationService;
}());

function abpHttpFactory(xhrBackend, requestOptions, configuration) {
    return new AbpHttp(xhrBackend, requestOptions, configuration);
}
var ABP_HTTP_PROVIDER = {
    provide: _angular_http.Http,
    useFactory: abpHttpFactory,
    deps: [_angular_http.XHRBackend, _angular_http.RequestOptions, AbpHttpConfiguration]
};
var AbpModule = (function () {
    function AbpModule() {
    }
    AbpModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    imports: [
                        _angular_http.HttpModule,
                        _angular_http.JsonpModule
                    ],
                    declarations: [],
                    providers: [
                        AbpSessionService,
                        PermissionCheckerService,
                        FeatureCheckerService,
                        LocalizationService,
                        SettingService,
                        NotifyService,
                        MessageService,
                        LogService,
                        AbpMultiTenancyService,
                        AbpUserConfigurationService,
                        AbpHttpConfiguration,
                        ABP_HTTP_PROVIDER,
                        TokenService,
                        UtilsService
                    ]
                },] },
    ];
    /** @nocollapse */
    AbpModule.ctorParameters = function () { return []; };
    return AbpModule;
}());

/**
 * @module
 * @description
 * Entry point for all public APIs of the Angular Module
 */

exports.AbpModule = AbpModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
