{"version":3,"sources":["../../../src/localization/localization.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAG3C;IAAA;IAwBA,CAAC;IAtBG,sBAAI,0CAAS;aAAb;YACI,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,SAAS,CAAC;QACtC,CAAC;;;OAAA;IAED,sBAAI,gDAAe;aAAnB;YACI,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,eAAe,CAAC;QAC5C,CAAC;;;OAAA;IAED,sCAAQ,GAAR,UAAS,GAAW,EAAE,UAAkB;QACpC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;IACtD,CAAC;IAED,uCAAS,GAAT,UAAU,UAAkB;QACxB,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAClD,CAAC;IAEE,8BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,kCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,0BAAC;CAxBD,AAwBC,IAAA;SAxBY,mBAAmB","file":"localization.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n\r\nexport class LocalizationService {\r\n\r\n    get languages(): abp.localization.ILanguageInfo[] {\r\n        return abp.localization.languages;\r\n    }\r\n\r\n    get currentLanguage(): abp.localization.ILanguageInfo {\r\n        return abp.localization.currentLanguage;\r\n    }\r\n\r\n    localize(key: string, sourceName: string): string {\r\n        return abp.localization.localize(key, sourceName);\r\n    }\r\n    \r\n    getSource(sourceName: string): (key: string) => string {\r\n        return abp.localization.getSource(sourceName);\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}