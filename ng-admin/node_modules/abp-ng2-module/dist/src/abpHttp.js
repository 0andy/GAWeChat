var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Injectable } from '@angular/core';
import { Http, XHRBackend, Headers, Response, ResponseOptions, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { MessageService } from './message/message.service';
import { LogService } from './log/log.service';
import { TokenService } from './auth/token.service';
import { UtilsService } from './utils/utils.service';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
var AbpHttpConfiguration = (function () {
    function AbpHttpConfiguration(_messageService, _logService) {
        this._messageService = _messageService;
        this._logService = _logService;
        this.defaultError = {
            message: 'An error has occurred!',
            details: 'Error detail not sent by server.'
        };
        this.defaultError401 = {
            message: 'You are not authenticated!',
            details: 'You should be authenticated (sign in) in order to perform this operation.'
        };
        this.defaultError403 = {
            message: 'You are not authorized!',
            details: 'You are not allowed to perform this operation.'
        };
        this.defaultError404 = {
            message: 'Resource not found!',
            details: 'The resource requested could not found on the server.'
        };
    }
    AbpHttpConfiguration.prototype.logError = function (error) {
        this._logService.error(error);
    };
    AbpHttpConfiguration.prototype.showError = function (error) {
        if (error.details) {
            return this._messageService.error(error.details, error.message || this.defaultError.message);
        }
        else {
            return this._messageService.error(error.message || this.defaultError.message);
        }
    };
    AbpHttpConfiguration.prototype.handleTargetUrl = function (targetUrl) {
        if (!targetUrl) {
            location.href = '/';
        }
        else {
            location.href = targetUrl;
        }
    };
    AbpHttpConfiguration.prototype.handleUnAuthorizedRequest = function (messagePromise, targetUrl) {
        var _this = this;
        var self = this;
        if (messagePromise) {
            messagePromise.done(function () {
                _this.handleTargetUrl(targetUrl || '/');
            });
        }
        else {
            self.handleTargetUrl(targetUrl || '/');
        }
    };
    AbpHttpConfiguration.prototype.handleNonAbpErrorResponse = function (response) {
        var self = this;
        switch (response.status) {
            case 401:
                self.handleUnAuthorizedRequest(self.showError(self.defaultError401), '/');
                break;
            case 403:
                self.showError(self.defaultError403);
                break;
            case 404:
                self.showError(self.defaultError404);
                break;
            default:
                self.showError(self.defaultError);
                break;
        }
    };
    AbpHttpConfiguration.prototype.handleAbpResponse = function (response, ajaxResponse) {
        var newResponse = new ResponseOptions({
            url: response.url,
            body: ajaxResponse,
            headers: response.headers,
            status: response.status,
            statusText: response.statusText,
            type: response.type
        });
        if (ajaxResponse.success) {
            newResponse.body = ajaxResponse.result;
            if (ajaxResponse.targetUrl) {
                this.handleTargetUrl(ajaxResponse.targetUrl);
                ;
            }
        }
        else {
            if (!ajaxResponse.error) {
                ajaxResponse.error = this.defaultError;
            }
            this.logError(ajaxResponse.error);
            this.showError(ajaxResponse.error);
            if (response.status === 401) {
                this.handleUnAuthorizedRequest(null, ajaxResponse.targetUrl);
            }
        }
        return new Response(newResponse);
    };
    AbpHttpConfiguration.prototype.getAbpAjaxResponseOrNull = function (response) {
        if (!response || !response.headers) {
            return null;
        }
        var contentType = response.headers.get('Content-Type');
        if (!contentType) {
            this._logService.warn('Content-Type is not sent!');
            return null;
        }
        if (contentType.indexOf("application/json") < 0) {
            this._logService.warn('Content-Type is not application/json: ' + contentType);
            return null;
        }
        var responseObj = response.json();
        if (!responseObj.__abp) {
            return null;
        }
        return responseObj;
    };
    AbpHttpConfiguration.prototype.handleResponse = function (response) {
        var ajaxResponse = this.getAbpAjaxResponseOrNull(response);
        if (ajaxResponse == null) {
            return response;
        }
        return this.handleAbpResponse(response, ajaxResponse);
    };
    AbpHttpConfiguration.prototype.handleError = function (error) {
        var ajaxResponse = this.getAbpAjaxResponseOrNull(error);
        if (ajaxResponse != null) {
            this.handleAbpResponse(error, ajaxResponse);
            return Observable.throw(ajaxResponse.error);
        }
        else {
            this.handleNonAbpErrorResponse(error);
            return Observable.throw('HTTP error: ' + error.status + ', ' + error.statusText);
        }
    };
    AbpHttpConfiguration.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    AbpHttpConfiguration.ctorParameters = function () { return [
        { type: MessageService, },
        { type: LogService, },
    ]; };
    return AbpHttpConfiguration;
}());
export { AbpHttpConfiguration };
var AbpHttp = (function (_super) {
    __extends(AbpHttp, _super);
    function AbpHttp(backend, defaultOptions, configuration) {
        var _this = _super.call(this, backend, defaultOptions) || this;
        _this._tokenService = new TokenService();
        _this._utilsService = new UtilsService();
        _this.configuration = configuration;
        return _this;
    }
    AbpHttp.prototype.get = function (url, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        this.normalizeRequestOptions(options);
        return _super.prototype.get.call(this, url, options)
            .map(function (response) { return _this.configuration.handleResponse(response); })
            .catch(function (error) { return _this.configuration.handleError(error); });
    };
    AbpHttp.prototype.post = function (url, body, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        this.normalizeRequestOptions(options);
        return _super.prototype.post.call(this, url, body, options)
            .map(function (response) { return _this.configuration.handleResponse(response); })
            .catch(function (error) { return _this.configuration.handleError(error); });
    };
    AbpHttp.prototype.put = function (url, body, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        this.normalizeRequestOptions(options);
        return _super.prototype.put.call(this, url, body, options)
            .map(function (response) { return _this.configuration.handleResponse(response); })
            .catch(function (error) { return _this.configuration.handleError(error); });
    };
    AbpHttp.prototype.delete = function (url, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        this.normalizeRequestOptions(options);
        return _super.prototype.delete.call(this, url, options)
            .map(function (response) { return _this.configuration.handleResponse(response); })
            .catch(function (error) { return _this.configuration.handleError(error); });
    };
    AbpHttp.prototype.request = function (url, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        this.normalizeRequestOptions(options);
        return _super.prototype.request.call(this, url, options)
            .map(function (response) { return _this.configuration.handleResponse(response); })
            .catch(function (error) { return _this.configuration.handleError(error); });
    };
    AbpHttp.prototype.normalizeRequestOptions = function (options) {
        if (!options.headers) {
            options.headers = new Headers();
        }
        this.addXRequestedWithHeader(options);
        this.addAuthorizationHeaders(options);
        this.addAspNetCoreCultureHeader(options);
        this.addAcceptLanguageHeader(options);
        this.addTenantIdHeader(options);
    };
    AbpHttp.prototype.addXRequestedWithHeader = function (options) {
        if (options.headers) {
            options.headers.append('X-Requested-With', 'XMLHttpRequest');
        }
    };
    AbpHttp.prototype.addAspNetCoreCultureHeader = function (options) {
        var cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && options.headers && !options.headers.has('.AspNetCore.Culture')) {
            options.headers.append('.AspNetCore.Culture', cookieLangValue);
        }
    };
    AbpHttp.prototype.addAcceptLanguageHeader = function (options) {
        var cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && options.headers && !options.headers.has('Accept-Language')) {
            options.headers.append('Accept-Language', cookieLangValue);
        }
    };
    AbpHttp.prototype.addTenantIdHeader = function (options) {
        var cookieTenantIdValue = this._utilsService.getCookieValue('Abp.TenantId');
        if (cookieTenantIdValue && options.headers && !options.headers.has('Abp.TenantId')) {
            options.headers.append('Abp.TenantId', cookieTenantIdValue);
        }
    };
    AbpHttp.prototype.addAuthorizationHeaders = function (options) {
        var authorizationHeaders = options.headers ? options.headers.getAll('Authorization') : null;
        if (!authorizationHeaders) {
            authorizationHeaders = [];
        }
        if (!this.itemExists(authorizationHeaders, function (item) { return item.indexOf('Bearer ') == 0; })) {
            var token = this._tokenService.getToken();
            if (options.headers && token) {
                options.headers.append('Authorization', 'Bearer ' + token);
            }
        }
    };
    AbpHttp.prototype.itemExists = function (items, predicate) {
        for (var i = 0; i < items.length; i++) {
            if (predicate(items[i])) {
                return true;
            }
        }
        return false;
    };
    AbpHttp.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    AbpHttp.ctorParameters = function () { return [
        { type: XHRBackend, },
        { type: RequestOptions, },
        { type: AbpHttpConfiguration, },
    ]; };
    return AbpHttp;
}(Http));
export { AbpHttp };
//# sourceMappingURL=abpHttp.js.map