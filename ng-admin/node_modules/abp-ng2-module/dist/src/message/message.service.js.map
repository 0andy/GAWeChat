{"version":3,"sources":["../../../src/message/message.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAG3C;IAAA;IAmCA,CAAC;IAjCG,6BAAI,GAAJ,UAAK,OAAe,EAAE,KAAc;QAChC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,gCAAO,GAAP,UAAQ,OAAe,EAAE,KAAc;QACnC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;IAED,6BAAI,GAAJ,UAAK,OAAe,EAAE,KAAc;QAChC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,8BAAK,GAAL,UAAM,OAAe,EAAE,KAAc;QACjC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAKD,gCAAO,GAAP,UAAQ,OAAe,EAAE,eAAsD,EAAE,QAAoC;QACjH,EAAE,CAAC,CAAC,OAAO,eAAe,IAAI,QAAQ,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,eAAyB,EAAE,QAAQ,CAAC,CAAC;QAC7E,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,eAA8C,CAAC,CAAC;QACxF,CAAC;IACL,CAAC;IAEE,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,qBAAC;CAnCD,AAmCC,IAAA;SAnCY,cAAc","file":"message.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n\r\nexport class MessageService {\r\n\r\n    info(message: string, title?: string): any {\r\n        return abp.message.info(message, title);\r\n    }\r\n\r\n    success(message: string, title?: string): any {\r\n        return abp.message.success(message, title);\r\n    }\r\n\r\n    warn(message: string, title?: string): any {\r\n        return abp.message.warn(message, title);\r\n    }\r\n\r\n    error(message: string, title?: string): any {\r\n        return abp.message.error(message, title);\r\n    }\r\n\r\n    confirm(message: string, callback?: (result: boolean) => void): any;\r\n    confirm(message: string, title?: string, callback?: (result: boolean) => void): any;\r\n\r\n    confirm(message: string, titleOrCallBack?: string | ((result: boolean) => void), callback?: (result: boolean) => void): any {\r\n        if (typeof titleOrCallBack == 'string') {\r\n            return abp.message.confirm(message, titleOrCallBack as string, callback);\r\n        } else {\r\n            return abp.message.confirm(message, titleOrCallBack as ((result: boolean) => void));\r\n        }\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}