{"version":3,"file":"nz-radio-extra.component.js","sourceRoot":"","sources":["../../.ng_build/nz-radio-extra/nz-radio-extra.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,SAAS,EACT,UAAU,EACV,WAAW,EACX,YAAY,EACZ,KAAK,EAEL,SAAS,EACT,iBAAiB,EACjB,UAAU,GACX,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAwB,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AACzE,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;;IAmG1C,+BAAoB,WAAuB,EAAS,SAAoB;QAApD,gBAAW,GAAX,WAAW,CAAY;QAAS,cAAS,GAAT,SAAS,CAAW;wBA3ErD,KAAK;yBACJ,KAAK;wBACN,KAAK;0BAIX,WAAW;+BACH,IAAI,CAAC,UAAU,WAAQ;+BACvB,IAAI,CAAC,UAAU,WAAQ;;wBAE5B,QAAQ,CAAC,SAAS;yBACjB,QAAQ,CAAC,SAAS;QAiEjC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;KAC3C;0BA9DG,4CAAS;aAKb;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;SACtB;uBAPa,KAAc;YAC1B,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,CAAC,WAAW,EAAE,CAAC;;;;;0BAQjB,0CAAO;;YACT,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;;aAGrB,UAAY,KAAa;YACvB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC;aACR;YACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACrB;;;;0BAIG,6CAAU;aAKd;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;SACvB;uBAPc,KAAc;YAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;YAClC,IAAI,CAAC,WAAW,EAAE,CAAC;;;;;IAQrB,uCAAO,aAAC,CAAa;QACnB,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;;YAEpB,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAClC;;IAGH,uCAAO,GAAP;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;IAED,sCAAM,GAAN;QACE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;IAED,2CAAW,GAAX;QACE,IAAI,CAAC,SAAS;YACZ,GAAC,IAAI,CAAC,UAAU,IAAiB,IAAI;YACrC,GAAI,IAAI,CAAC,UAAU,aAAU,IAAI,IAAI,CAAC,QAAQ;YAC9C,GAAI,IAAI,CAAC,UAAU,aAAU,IAAI,IAAI,CAAC,QAAQ;YAC9C,GAAI,IAAI,CAAC,UAAU,cAAW,IAAG,IAAI,CAAC,SAAS;eAChD,CAAC;;KACH;IAMD,wCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAK,IAAI,CAAC,UAAU,aAAU,CAAC,CAAC;QAChE,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;IAED,2CAAW,GAAX,UAAY,KAAc;QACtB,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC;SACN;QACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,WAAW,EAAE,CAAC;KACtB;IAED,0CAAU,GAAV,UAAW,KAAU;QACjB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,WAAW,EAAE,CAAC;KACtB;IAED,gDAAgB,GAAhB,UAAiB,EAAkB;QAC/B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACtB;IAED,iDAAiB,GAAjB,UAAkB,EAAY;QAC1B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACvB;;gBA9HF,SAAS,SAAC;oBACT,QAAQ,EAAO,kBAAkB;oBACjC,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,QAAQ,EAAO,qRAMd;oBACD,SAAS,EAAM;wBACb;4BACE,OAAO,EAAM,iBAAiB;4BAC9B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,qBAAqB,EAArB,CAAqB,CAAC;4BACpD,KAAK,EAAQ,IAAI;yBAClB;qBACF;oBACD,SAAS,EAAM;wBACb,mBAAmB;qBACpB;iBACF;;;;gBAjCC,UAAU;gBAKV,SAAS;;;8BA2CR,KAAK,YACL,WAAW,SAAC,iCAAiC;4BAU7C,KAAK;+BAYL,KAAK,YACL,WAAW,SAAC,kCAAkC;4BAU9C,YAAY,SAAC,OAAO,EAAE,CAAE,QAAQ,CAAE;;gCApFvC;;SAoCe,qBAAqB","sourcesContent":["import {\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation,\n    forwardRef,\n  } from '@angular/core';\n\n  import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n  import { toBoolean } from '../util/convert';\n\n  @Component({\n    selector     : '[nz-radio-extra]',\n    encapsulation: ViewEncapsulation.None,\n    template     : `\n      <span [ngClass]=\"_classMap\">\n        <span [ngClass]=\"_innerPrefixCls\"></span>\n        <input type=\"radio\" [ngClass]=\"_inputPrefixCls\" [(ngModel)]=\"nzChecked\" (focus)=\"nzFocus()\" (blur)=\"nzBlur()\">\n      </span>\n      <ng-content></ng-content>\n    `,\n    providers    : [\n      {\n        provide    : NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NzRadioExtraComponent),\n        multi      : true\n      }\n    ],\n    styleUrls    : [\n      './style/index.css'\n    ]\n  })\n  export class NzRadioExtraComponent implements OnInit, ControlValueAccessor {\n    private _checked = false;\n    private _disabled = false;\n    private _focused = false;\n    _el: HTMLElement;\n    _classMap: any;\n    _value: string;\n    _prefixCls = 'ant-radio';\n    _innerPrefixCls = `${this._prefixCls}-inner`;\n    _inputPrefixCls = `${this._prefixCls}-input`;\n    // ngModel Access\n    onChange: any = Function.prototype;\n    onTouched: any = Function.prototype;\n\n    @Input()\n    @HostBinding('class.ant-radio-wrapper-checked')\n    set nzChecked(value: boolean) {\n      this._checked = toBoolean(value);\n      this.setClassMap();\n    }\n\n    get nzChecked(): boolean {\n      return this._checked;\n    }\n\n    @Input()\n    get nzValue(): string {\n      return this._value;\n    }\n\n    set nzValue(value: string) {\n      if (this._value === value) {\n        return;\n      }\n      this._value = value;\n    }\n\n    @Input()\n    @HostBinding('class.ant-radio-wrapper-disabled')\n    set nzDisabled(value: boolean) {\n      this._disabled = toBoolean(value);\n      this.setClassMap();\n    }\n\n    get nzDisabled(): boolean {\n      return this._disabled;\n    }\n\n    @HostListener('click', [ '$event' ])\n    onClick(e: MouseEvent): void {\n      e.preventDefault();\n      if (!this._disabled) {\n        // this._checked = true;\n        this.updateValue(!this._checked);\n      }\n    }\n\n    nzFocus(): void {\n      this._focused = true;\n      this.setClassMap();\n    }\n\n    nzBlur(): void {\n      this._focused = false;\n      this.setClassMap();\n    }\n\n    setClassMap(): void {\n      this._classMap = {\n        [this._prefixCls]              : true,\n        [`${this._prefixCls}-checked`] : this._checked,\n        [`${this._prefixCls}-focused`] : this._focused,\n        [`${this._prefixCls}-disabled`]: this._disabled\n      };\n    }\n\n    constructor(private _elementRef: ElementRef, public _renderer: Renderer2) {\n      this._el = this._elementRef.nativeElement;\n    }\n\n    ngOnInit(): void {\n      this._renderer.addClass(this._el, `${this._prefixCls}-wrapper`);\n      this.setClassMap();\n    }\n\n    updateValue(value: boolean): void {\n        if (value === this._checked) {\n        return;\n        }\n        this.onChange(value);\n        this._checked = value;\n        this.setClassMap();\n    }\n\n    writeValue(value: any): void {\n        this._checked = value;\n        this.setClassMap();\n    }\n\n    registerOnChange(fn: (_: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n  }\n"]}