import { Component, ViewEncapsulation, TemplateRef, Input, ContentChildren, QueryList, ElementRef, Renderer2, ContentChild, EventEmitter, Output } from '@angular/core';
import { NzCardTabComponent } from './nz-card-tab.component';
import { NzCardGridDirective } from './nz-card-grid.directive';
import { NzCardActionComponent } from './nz-card-action.component';
var NzCardComponent = (function () {
    // endregion
    function NzCardComponent(_el, _renderer) {
        this._el = _el;
        this._renderer = _renderer;
        // region: fieds
        this.nzLoading = false;
        this.nzBordered = true;
        this._titleHas = false;
        this._title = '';
        this.nzTabSelectedIndex = 0;
        this.nzTabChange = new EventEmitter(true);
        // endregion
        // region: set class
        this._prefixCls = 'ant-card';
        this._classList = [];
    }
    Object.defineProperty(NzCardComponent.prototype, "nzTitle", {
        set: function (value) {
            if (value instanceof TemplateRef)
                this._titleTpl = value;
            else
                this._title = value;
            this._titleHas = !!value;
        },
        enumerable: true,
        configurable: true
    });
    // For 2.x compatible
    // For 2.x compatible
    NzCardComponent.prototype.getCompatibleHoverable = 
    // For 2.x compatible
    function () {
        var status = typeof this.nzHoverable !== 'undefined' && this.nzHoverable !== false;
        if (typeof this.nzNoHovering !== 'undefined') {
            return !this.nzNoHovering || status;
        }
        return status;
    };
    NzCardComponent.prototype._setClassMap = function () {
        var _this = this;
        this._classList.forEach(function (cls) { return _this._renderer.removeClass(_this._el.nativeElement, cls); });
        this._classList = [
            this._prefixCls,
            this.nzLoading && this._prefixCls + "-loading",
            typeof this.nzBordered !== 'undefined' && this.nzBordered !== false && this._prefixCls + "-bordered",
            this.getCompatibleHoverable() && this._prefixCls + "-hoverable",
            typeof this.nzNoPadding !== 'undefined' && this.nzNoPadding !== false && this._prefixCls + "-no-padding",
            // padding-transition
            // transition
            this.gridList && this.gridList.length && this._prefixCls + "-contain-grid",
            this.tabList && this.tabList.length && this._prefixCls + "-contain-tabs",
            !!this.nzType && this._prefixCls + "-type-" + this.nzType
        ].filter(function (item) { return !!item; });
        this._classList.forEach(function (cls) { return _this._renderer.addClass(_this._el.nativeElement, cls); });
    };
    NzCardComponent.prototype.ngOnInit = function () {
    };
    NzCardComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._setClassMap();
        // 若在此进行 `body` 赋值会导致变化检测问题，因此 `setTimeout` 只是一个小技巧罢了
        setTimeout(function () {
            if (!_this.body && _this.tabList && _this.tabList.length > 0)
                _this.body = _this.tabList.first.contentTpl;
        });
    };
    NzCardComponent.prototype.ngOnChanges = function (changes) {
        this._setClassMap();
    };
    NzCardComponent.prototype._tabChange = function (value) {
        this.body = this.tabList.find(function (item, idx) { return idx === value.index; }).contentTpl;
        this.nzTabChange.emit(value);
    };
    NzCardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nz-card',
                    template: "<div *ngIf=\"_titleHas || title || extra || tabList?.length > 0\" class=\"ant-card-head\"> <div class=\"ant-card-head-wrapper\"> <div *ngIf=\"_titleHas || title\" class=\"ant-card-head-title\"> <ng-container *ngIf=\"_title; else (title || _titleTpl)\">{{ _title }}</ng-container> </div> <div *ngIf=\"extra\" class=\"ant-card-extra\"> <ng-template [ngTemplateOutlet]=\"extra\"></ng-template> </div> </div> <nz-tabset *ngIf=\"tabList?.length > 0\" [nzSize]=\"'large'\" [nzSelectedIndex]=\"nzTabSelectedIndex\" (nzSelectChange)=\"_tabChange($event)\" class=\"ant-tabs-large\"> <nz-tab *ngFor=\"let i of tabList\"> <ng-template #nzTabHeading> <ng-container *ngIf=\"i._title; else i._titleTpl\">{{ i._title }}</ng-container> </ng-template> </nz-tab> </nz-tabset> </div> <div *ngIf=\"cover\" class=\"ant-card-cover\"><ng-template [ngTemplateOutlet]=\"cover\"></ng-template></div> <div class=\"ant-card-body\" *ngIf=\"nzLoading\"> <div class=\"ant-card-loading-content\"> <p class=\"ant-card-loading-block\" style=\"width: 94%;\"></p> <p> <span class=\"ant-card-loading-block\" style=\"width: 28%;\"></span> <span class=\"ant-card-loading-block\" style=\"width: 62%;\"></span> </p> <p> <span class=\"ant-card-loading-block\" style=\"width: 22%;\"></span> <span class=\"ant-card-loading-block\" style=\"width: 66%;\"></span> </p> <p> <span class=\"ant-card-loading-block\" style=\"width: 56%;\"></span> <span class=\"ant-card-loading-block\" style=\"width: 39%;\"></span> </p> <p> <span class=\"ant-card-loading-block\" style=\"width: 21%;\"></span> <span class=\"ant-card-loading-block\" style=\"width: 15%;\"></span> <span class=\"ant-card-loading-block\" style=\"width: 40%;\"></span> </p> </div> </div> <div class=\"ant-card-body\" *ngIf=\"!nzLoading\" [ngStyle]=\"nzBodyStyle\"> <ng-template [ngTemplateOutlet]=\"body\"></ng-template> <ng-content></ng-content> </div> <ul *ngIf=\"actionList?.length>0\" class=\"ant-card-actions\"> <li *ngFor=\"let i of actionList\" [ngStyle]=\"{'width.%':100/actionList.length}\"> <span><ng-template [ngTemplateOutlet]=\"i.tpl\"></ng-template></span> </li> </ul> ",
                    styles: ["/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */ /* stylelint-disable declaration-bang-space-before */ /* stylelint-disable declaration-bang-space-before */ .ant-card { font-family: \"Helvetica Neue For Number\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei\", \"Helvetica Neue\", Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.5; color: rgba(0, 0, 0, 0.65); box-sizing: border-box; margin: 0; padding: 0; list-style: none; background: #fff; border-radius: 2px; position: relative; transition: all .3s; } .ant-card-hoverable { cursor: pointer; } .ant-card-hoverable:hover { box-shadow: 0 2px 8px rgba(0, 0, 0, 0.09); border-color: rgba(0, 0, 0, 0.09); } .ant-card-bordered { border: 1px solid #e8e8e8; } .ant-card-head { background: #fff; border-bottom: 1px solid #e8e8e8; padding: 0 24px; border-radius: 2px 2px 0 0; zoom: 1; margin-bottom: -1px; min-height: 48px; } .ant-card-head:before, .ant-card-head:after { content: \"\ \"; display: table; } .ant-card-head:after { clear: both; visibility: hidden; font-size: 0; height: 0; } .ant-card-head-wrapper { display: flex; } .ant-card-head-title { font-size: 16px; padding: 16px 0; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; color: rgba(0, 0, 0, 0.85); font-weight: 500; display: inline-block; flex: 1; } .ant-card-head .ant-tabs { margin-bottom: -17px; clear: both; } .ant-card-head .ant-tabs-bar { border-bottom: 1px solid #e8e8e8; } .ant-card-extra { float: right; padding: 17.5px 0; text-align: right; margin-left: auto; } .ant-card-body { padding: 24px; zoom: 1; } .ant-card-body:before, .ant-card-body:after { content: \"\ \"; display: table; } .ant-card-body:after { clear: both; visibility: hidden; font-size: 0; height: 0; } .ant-card-contain-grid .ant-card-body { margin: -1px 0 0 -1px; padding: 0; } .ant-card-grid { border-radius: 0; border: 0; box-shadow: 1px 0 0 0 #e8e8e8, 0 1px 0 0 #e8e8e8, 1px 1px 0 0 #e8e8e8, 1px 0 0 0 #e8e8e8 inset, 0 1px 0 0 #e8e8e8 inset; width: 33.33%; float: left; padding: 24px; transition: all .3s; } .ant-card-grid:hover { position: relative; z-index: 1; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15); } .ant-card-contain-tabs .ant-card-head-title { padding-bottom: 0; min-height: 32px; } .ant-card-contain-tabs .ant-card-extra { padding-bottom: 0; } .ant-card-cover > * { width: 100%; display: block; } .ant-card-actions { border-top: 1px solid #e8e8e8; background: #fafafa; zoom: 1; list-style: none; margin: 0; padding: 0; } .ant-card-actions:before, .ant-card-actions:after { content: \"\ \"; display: table; } .ant-card-actions:after { clear: both; visibility: hidden; font-size: 0; height: 0; } .ant-card-actions > li { float: left; text-align: center; margin: 12px 0; color: rgba(0, 0, 0, 0.45); } .ant-card-actions > li > span { display: inline-block; font-size: 14px; cursor: pointer; line-height: 22px; min-width: 32px; position: relative; } .ant-card-actions > li > span:hover { color: #1890ff; transition: color .3s; } .ant-card-actions > li > span > .anticon { font-size: 16px; } .ant-card-actions > li > span a { color: rgba(0, 0, 0, 0.45); } .ant-card-actions > li > span a:hover { color: #1890ff; } .ant-card-actions > li:not(:last-child) { border-right: 1px solid #e8e8e8; } .ant-card-wider-padding .ant-card-head { padding: 0 32px; } .ant-card-wider-padding .ant-card-body { padding: 24px 32px; } .ant-card-padding-transition .ant-card-head, .ant-card-padding-transition .ant-card-body { transition: padding .3s; } .ant-card-padding-transition .ant-card-extra { transition: right .3s; } .ant-card-type-inner .ant-card-head { padding: 0 24px; background: #fafafa; } .ant-card-type-inner .ant-card-head-title { padding: 12px 0; font-size: 14px; } .ant-card-type-inner .ant-card-body { padding: 16px 24px; } .ant-card-type-inner .ant-card-extra { padding: 13.5px 0; } .ant-card-meta { margin: -4px 0; } .ant-card-meta-content { display: table-row; } .ant-card-meta-avatar { padding-right: 16px; display: table-cell; } .ant-card-meta-detail { display: table-cell; vertical-align: top; position: relative; } .ant-card-meta-detail > div:not(:last-child) { margin-bottom: 8px; } .ant-card-meta-title { font-size: 16px; text-overflow: ellipsis; width: 100%; overflow: hidden; white-space: nowrap; color: rgba(0, 0, 0, 0.85); font-weight: 500; } .ant-card-meta-description { color: rgba(0, 0, 0, 0.45); } .ant-card-loading .ant-card-body { user-select: none; padding: 0; } .ant-card-loading-content { padding: 24px; } .ant-card-loading-content p { margin: 0; } .ant-card-loading-block { display: inline-block; margin: 5px 2% 0 0; height: 14px; border-radius: 2px; background: linear-gradient(90deg, rgba(207, 216, 220, 0.2), rgba(207, 216, 220, 0.4), rgba(207, 216, 220, 0.2)); animation: card-loading 1.4s ease infinite; background-size: 600% 600%; } @keyframes card-loading { 0%, 100% { background-position: 0 50%; } 50% { background-position: 100% 50%; } } ",
"nz-card, nz-card nz-card-meta { display: block; } nz-card.ant-card-no-padding .ant-card-body { padding: 0; } nz-card .ant-tabs-large .ant-tabs-tab { padding: 16px; } nz-card .ant-tabs-nav .ant-tabs-tab-active { font-weight: 500; } "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    NzCardComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    NzCardComponent.propDecorators = {
        "nzLoading": [{ type: Input },],
        "nzBordered": [{ type: Input },],
        "nzHoverable": [{ type: Input },],
        "nzNoPadding": [{ type: Input },],
        "nzBodyStyle": [{ type: Input },],
        "nzNoHovering": [{ type: Input },],
        "nzType": [{ type: Input },],
        "nzTitle": [{ type: Input },],
        "title": [{ type: ContentChild, args: ['title',] },],
        "extra": [{ type: ContentChild, args: ['extra',] },],
        "cover": [{ type: ContentChild, args: ['cover',] },],
        "body": [{ type: ContentChild, args: ['body',] },],
        "nzTabSelectedIndex": [{ type: Input },],
        "nzTabChange": [{ type: Output },],
        "tabList": [{ type: ContentChildren, args: [NzCardTabComponent,] },],
        "gridList": [{ type: ContentChildren, args: [NzCardGridDirective,] },],
        "actionList": [{ type: ContentChildren, args: [NzCardActionComponent,] },],
    };
    return NzCardComponent;
}());
export { NzCardComponent };
//# sourceMappingURL=nz-card.component.js.map