(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('ng-zorro-antd')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'ng-zorro-antd'], factory) :
	(factory((global['ng-clipboard-antd'] = {}),global.ng.core,global.ng.common,global.ngZorro.antd));
}(this, (function (exports,core,common,ngZorroAntd) { 'use strict';

// tslint:disable:no-inferrable-types
var NzClipboardConfig = (function () {
    function NzClipboardConfig() {
        /**
             * 成功时显示文本（默认：复制成功）
             * @type {string}
             */
        this.success = '复制成功';
        /**
             * 错误时显示文本（默认：复制失败）
             * @type {string}
             */
        this.error = '复制失败';
    }
    return NzClipboardConfig;
}());

/**
 * The core function is ported from clipboard.js & ngx-clipboard
 * clipboard.js: https://github.com/zenorocha/clipboard.js
 * ngx-clipboard: https://github.com/maxisam/ngx-clipboard
 */
var NzClipboardService = (function () {
    function NzClipboardService(document, cog, messageSrv) {
        this.document = document;
        this.messageSrv = messageSrv;
        this.config = Object.assign(new NzClipboardConfig(), cog);
    }
    Object.defineProperty(NzClipboardService.prototype, "isSupported", {
        get: function () {
            return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy');
        },
        enumerable: true,
        configurable: true
    });
    NzClipboardService.prototype.isTargetValid = function (element) {
        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {
            if (element.hasAttribute('disabled')) {
                // tslint:disable-next-line:max-line-length
                throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
            }
            return true;
        }
        throw new Error('Target should be input or textarea');
    };
    /**
     * copyFromInputElement
     */
    /**
         * copyFromInputElement
         */
    NzClipboardService.prototype.copyFromInputElement = /**
         * copyFromInputElement
         */
    function (targetElm, success, error) {
        try {
            this.selectTarget(targetElm);
            var re = this.copyText();
            this.clearSelection(targetElm);
            this.handleMessage(true, success);
            return re;
        }
        catch (error) {
            console.warn('copy error', error);
            this.handleMessage(false, error);
            return false;
        }
    };
    /**
     * Creates a fake textarea element, sets its value from `text` property,
     * and makes a selection on it.
     */
    /**
         * Creates a fake textarea element, sets its value from `text` property,
         * and makes a selection on it.
         */
    NzClipboardService.prototype.copyFromContent = /**
         * Creates a fake textarea element, sets its value from `text` property,
         * and makes a selection on it.
         */
    function (content, success, error) {
        if (!this.tempTextArea) {
            this.tempTextArea = this.createTempTextArea(this.document);
            this.document.body.appendChild(this.tempTextArea);
        }
        this.tempTextArea.value = content;
        return this.copyFromInputElement(this.tempTextArea, success, error);
    };
    // remove temporary textarea if any
    // remove temporary textarea if any
    NzClipboardService.prototype.destroy = 
    // remove temporary textarea if any
    function () {
        if (this.tempTextArea) {
            this.document.body.removeChild(this.tempTextArea);
            this.tempTextArea = undefined;
        }
    };
    // select the target html input element
    // select the target html input element
    NzClipboardService.prototype.selectTarget = 
    // select the target html input element
    function (inputElement) {
        if (inputElement.select)
            inputElement.select();
        if (inputElement.setSelectionRange)
            inputElement.setSelectionRange(0, inputElement.value.length);
        return inputElement.value.length;
    };
    NzClipboardService.prototype.copyText = function () {
        return this.document.execCommand('copy');
    };
    // Removes current selection and focus from `target` element.
    // Removes current selection and focus from `target` element.
    NzClipboardService.prototype.clearSelection = 
    // Removes current selection and focus from `target` element.
    function (inputElement) {
        // tslint:disable-next-line:no-unused-expression
        inputElement && inputElement.blur();
        window.getSelection().removeAllRanges();
    };
    // create a fake textarea for copy command
    // create a fake textarea for copy command
    NzClipboardService.prototype.createTempTextArea = 
    // create a fake textarea for copy command
    function (doc) {
        var isRTL = doc.documentElement.getAttribute('dir') === 'rtl';
        var ta;
        ta = doc.createElement('textarea');
        // Prevent zooming on iOS
        ta.style.fontSize = '12pt';
        // Reset box model
        ta.style.border = '0';
        ta.style.padding = '0';
        ta.style.margin = '0';
        // Move element out of screen horizontally
        ta.style.position = 'absolute';
        ta.style[isRTL ? 'right' : 'left'] = '-9999px';
        // Move element to the same position vertically
        var yPosition = window.pageYOffset || doc.documentElement.scrollTop;
        ta.style.top = yPosition + 'px';
        ta.setAttribute('readonly', '');
        return ta;
    };
    NzClipboardService.prototype.handleMessage = function (status, focus) {
        if (typeof focus === 'undefined') {
            focus = status ? this.config.success : this.config.error;
        }
        if (status) {
            if (focus)
                this.messageSrv.success(focus);
        }
        else {
            if (focus)
                this.messageSrv.error(focus);
        }
    };
    NzClipboardService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    NzClipboardService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },
        { type: NzClipboardConfig, },
        { type: ngZorroAntd.NzMessageService, },
    ]; };
    return NzClipboardService;
}());

var NzClipboardDirective = (function () {
    function NzClipboardDirective(clipboardSrv) {
        this.clipboardSrv = clipboardSrv;
        this.success = new core.EventEmitter();
        this.error = new core.EventEmitter();
    }
    NzClipboardDirective.prototype._click = function () {
        if (!this.clipboardSrv.isSupported) {
            this.handleResult(false, undefined);
        }
        else if (this.target) {
            var newTarget = null;
            if (!(this.target instanceof HTMLInputElement)) {
                newTarget = this.target._el.querySelector('input,textarea');
            }
            else {
                newTarget = this.target;
            }
            this.clipboardSrv.isTargetValid(newTarget);
            this.handleResult(this.clipboardSrv.copyFromInputElement(newTarget, this.successText, this.errorText), newTarget.value);
        }
        else if (this.content) {
            this.handleResult(this.clipboardSrv.copyFromContent(this.content, this.successText, this.errorText), this.content);
        }
    };
    NzClipboardDirective.prototype.handleResult = function (succeeded, copiedContent) {
        if (succeeded) {
            this.success.emit({ status: true, content: copiedContent });
        }
        else {
            this.error.emit({ status: false });
        }
    };
    NzClipboardDirective.prototype.ngOnDestroy = function () {
        this.clipboardSrv.destroy();
    };
    NzClipboardDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[nz-clipboard]'
                },] },
    ];
    /** @nocollapse */
    NzClipboardDirective.ctorParameters = function () { return [
        { type: NzClipboardService, },
    ]; };
    NzClipboardDirective.propDecorators = {
        "content": [{ type: core.Input, args: ['nz-clipboard',] },],
        "target": [{ type: core.Input, args: ['nzTarget',] },],
        "successText": [{ type: core.Input, args: ['nzSuccessText',] },],
        "errorText": [{ type: core.Input, args: ['nzErrorText',] },],
        "success": [{ type: core.Output, args: ['nzSuccess',] },],
        "error": [{ type: core.Output, args: ['nzError',] },],
        "_click": [{ type: core.HostListener, args: ['click', ['$event.target'],] },],
    };
    return NzClipboardDirective;
}());

// endregion
var NzClipboardModule = (function () {
    function NzClipboardModule() {
    }
    NzClipboardModule.forRoot = function (config) {
        return {
            ngModule: NzClipboardModule,
            providers: [
                NzClipboardService,
                ngZorroAntd.NzMessageService,
                { provide: NzClipboardConfig, useValue: config }
            ]
        };
    };
    NzClipboardModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, ngZorroAntd.NzMessageModule],
                    declarations: [NzClipboardDirective],
                    exports: [NzClipboardDirective]
                },] },
    ];
    /** @nocollapse */
    NzClipboardModule.ctorParameters = function () { return []; };
    return NzClipboardModule;
}());

exports.NzClipboardModule = NzClipboardModule;
exports.NzClipboardConfig = NzClipboardConfig;
exports.NzClipboardDirective = NzClipboardDirective;
exports.NzClipboardService = NzClipboardService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
