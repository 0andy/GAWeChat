{"version":3,"file":"directive.js","sourceRoot":"","sources":["../../.ng_build/src/directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAqB,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AACxG,OAAO,EAAE,kBAAkB,EAAE,MAAM,WAAW,CAAC;;IAgC3C,8BAAoB,YAAgC;QAAhC,iBAAY,GAAZ,YAAY,CAAoB;uBAJrB,IAAI,YAAY,EAAqB;qBAEzC,IAAI,YAAY,EAAqB;KAEP;IAGzD,qCAAM;QACF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SACvC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACrB,IAAI,SAAS,GAAqB,IAAI,CAAC;YACvC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,YAAY,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBAC7C,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,gBAAgB,CAAqB,CAAC;aACnF;YAAC,IAAI,CAAC,CAAC;gBACJ,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;aAC3B;YACD,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAC3C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;SAC3H;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACtH;;IAGG,2CAAY,GAApB,UAAqB,SAAkB,EAAE,aAAiC;QACtE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,CAAC;SAC/D;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;SACtC;KACJ;IAED,0CAAW,GAAX;QACI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;KAC/B;;gBA/CJ,SAAS,SAAC;oBACP,QAAQ,EAAE,gBAAgB;iBAC7B;;;;gBAjBQ,kBAAkB;;;4BAoBtB,KAAK,SAAC,cAAc;2BAEpB,KAAK,SAAC,UAAU;gCAEhB,KAAK,SAAC,eAAe;8BAErB,KAAK,SAAC,aAAa;4BAEnB,MAAM,SAAC,WAAW;0BAElB,MAAM,SAAC,SAAS;2BAIhB,YAAY,SAAC,OAAO,EAAE,CAAC,eAAe,CAAC;;+BAnC5C;;SAmBa,oBAAoB","sourcesContent":["import { Directive, OnInit, OnDestroy, Input, EventEmitter, Output, HostListener } from '@angular/core';\r\nimport { NzClipboardService } from './service';\r\nimport { NzInputComponent } from 'ng-zorro-antd';\r\n\r\nexport interface NzClipboardNotify {\r\n    /**\r\n     * 是否复制成功\r\n     */\r\n    status: boolean;\r\n\r\n    /**\r\n     * 复制内容\r\n     */\r\n    content?: string;\r\n}\r\n\r\n@Directive({\r\n    selector: '[nz-clipboard]'\r\n})\r\nexport class NzClipboardDirective implements OnDestroy {\r\n\r\n    @Input('nz-clipboard') content: string;\r\n\r\n    @Input('nzTarget') target: HTMLInputElement | NzInputComponent;\r\n\r\n    @Input('nzSuccessText') successText: string;\r\n\r\n    @Input('nzErrorText') errorText: string;\r\n\r\n    @Output('nzSuccess') success = new EventEmitter<NzClipboardNotify>();\r\n\r\n    @Output('nzError') error = new EventEmitter<NzClipboardNotify>();\r\n\r\n    constructor(private clipboardSrv: NzClipboardService) { }\r\n\r\n    @HostListener('click', ['$event.target'])\r\n    _click() {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined);\r\n        } else if (this.target) {\r\n            let newTarget: HTMLInputElement = null;\r\n            if (!(this.target instanceof HTMLInputElement)) {\r\n                newTarget = this.target._el.querySelector('input,textarea') as HTMLInputElement;\r\n            } else {\r\n                newTarget = this.target;\r\n            }\r\n            this.clipboardSrv.isTargetValid(newTarget);\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(newTarget, this.successText, this.errorText), newTarget.value);\r\n        } else if (this.content) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.content, this.successText, this.errorText), this.content);\r\n        }\r\n    }\r\n\r\n    private handleResult(succeeded: Boolean, copiedContent: string | undefined) {\r\n        if (succeeded) {\r\n            this.success.emit({ status: true, content: copiedContent });\r\n        } else {\r\n            this.error.emit({ status: false });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.clipboardSrv.destroy();\r\n    }\r\n\r\n}\r\n"]}