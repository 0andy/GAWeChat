{"version":3,"file":"service.js","sourceRoot":"","sources":["../../.ng_build/src/service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * The core function is ported from clipboard.js & ngx-clipboard\r\n * clipboard.js: https://github.com/zenorocha/clipboard.js\r\n * ngx-clipboard: https://github.com/maxisam/ngx-clipboard\r\n */\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { NzMessageService } from 'ng-zorro-antd';\r\nimport { NzClipboardConfig } from './config';\r\n\r\n@Injectable()\r\nexport class NzClipboardService {\r\n\r\n    private tempTextArea: HTMLTextAreaElement | undefined;\r\n    private config: NzClipboardConfig;\r\n\r\n    constructor(\r\n        @Inject(DOCUMENT) private document: any,\r\n        cog: NzClipboardConfig,\r\n        private messageSrv: NzMessageService\r\n    ) {\r\n        this.config = Object.assign(new NzClipboardConfig(), cog);\r\n    }\r\n\r\n    get isSupported(): boolean {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy');\r\n    }\r\n\r\n    isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                // tslint:disable-next-line:max-line-length\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n\r\n    /**\r\n     * copyFromInputElement\r\n     */\r\n    copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement, success?: string, error?: string): boolean {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(targetElm);\r\n            this.handleMessage(true, success);\r\n            return re;\r\n        } catch (error) {\r\n            console.warn('copy error', error);\r\n            this.handleMessage(false, error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    copyFromContent(content: string, success?: string, error?: string) {\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document);\r\n            this.document.body.appendChild(this.tempTextArea);\r\n        }\r\n        this.tempTextArea.value = content;\r\n        return this.copyFromInputElement(this.tempTextArea, success, error);\r\n    }\r\n\r\n    // remove temporary textarea if any\r\n    destroy() {\r\n        if (this.tempTextArea) {\r\n            this.document.body.removeChild(this.tempTextArea);\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n\r\n    // select the target html input element\r\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\r\n        if (inputElement.select) inputElement.select();\r\n        if (inputElement.setSelectionRange) inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n\r\n    private copyText(): boolean {\r\n        return this.document.execCommand('copy');\r\n    }\r\n\r\n    // Removes current selection and focus from `target` element.\r\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement) {\r\n        // tslint:disable-next-line:no-unused-expression\r\n        inputElement && inputElement.blur();\r\n        window.getSelection().removeAllRanges();\r\n    }\r\n    // create a fake textarea for copy command\r\n    private createTempTextArea(doc: Document): HTMLTextAreaElement {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta: HTMLTextAreaElement;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n\r\n    private handleMessage(status: boolean, focus?: string) {\r\n        if (typeof focus === 'undefined') {\r\n            focus = status ? this.config.success : this.config.error;\r\n        }\r\n        if (status) {\r\n            if (focus) this.messageSrv.success(focus);\r\n        } else {\r\n            if (focus) this.messageSrv.error(focus);\r\n        }\r\n    }\r\n}\r\n"]}