{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\xlsx\\xlsx.service.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\xlsx\\xlsx.service.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, Inject } from '@angular/core';\nimport { saveAs } from 'file-saver';\nimport { _HttpClient } from '@delon/theme';\nimport { DA_XLSX_CONFIG } from './interface';\nimport { LazyService } from '../utils/lazy.service';\nvar XlsxService = /*@__PURE__*/ (function () {\n    function XlsxService(config, _http, lazy) {\n        this.config = config;\n        this._http = _http;\n        this.lazy = lazy;\n    }\n    XlsxService.prototype.init = function () {\n        var config = Object.assign({\n            url: \"//cdn.bootcss.com/xlsx/0.11.14/xlsx.min.js\",\n            modules: []\n        }, this.config);\n        return this.lazy.load([config.url].concat(config.modules));\n    };\n    XlsxService.prototype.read = function (wb) {\n        var ret = {};\n        wb.SheetNames.forEach(function (name) {\n            var sheet = wb.Sheets[name];\n            ret[name] = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n        });\n        return ret;\n    };\n    /** 导入Excel并输出JSON，支持 `<input type=\"file\">`、URL 形式 */\n    /** 导入Excel并输出JSON，支持 `<input type=\"file\">`、URL 形式 */\n    XlsxService.prototype.import = /** 导入Excel并输出JSON，支持 `<input type=\"file\">`、URL 形式 */\n        function (fileOrUrl) {\n            var _this = this;\n            return new Promise(function (resolver) {\n                _this.init().then(function () {\n                    // from url\n                    if (typeof fileOrUrl === 'string') {\n                        _this._http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe(function (res) {\n                            var wb = XLSX.read(new Uint8Array(res), { type: 'array' });\n                            resolver(_this.read(wb));\n                        });\n                        return;\n                    }\n                    // from file\n                    var reader = new FileReader();\n                    reader.onload = function (e) {\n                        var wb = XLSX.read(e.target.result, { type: 'binary' });\n                        resolver(_this.read(wb));\n                    };\n                    reader.readAsBinaryString(fileOrUrl);\n                });\n            });\n        };\n    /** 导出 */\n    /** 导出 */\n    XlsxService.prototype.export = /** 导出 */\n        function (options) {\n            return this.init().then(function () {\n                var wb = XLSX.utils.book_new();\n                if (Array.isArray(options.sheets)) {\n                    options.sheets.forEach(function (value, index) {\n                        var ws = XLSX.utils.aoa_to_sheet(value.data);\n                        XLSX.utils.book_append_sheet(wb, ws, value.name || \"Sheet\" + (index + 1));\n                    });\n                }\n                else {\n                    wb.SheetNames = Object.keys(options.sheets);\n                    wb.Sheets = options.sheets;\n                }\n                if (options.callback)\n                    options.callback(wb);\n                var wbout = XLSX.write(wb, Object.assign({\n                    bookType: 'xlsx',\n                    type: 'array'\n                }, options.opts));\n                saveAs(new Blob([wbout], { type: 'application/octet-stream' }), options.filename || 'export.xlsx');\n            });\n        };\n    return XlsxService;\n}());\nexport { XlsxService };\n//# sourceMappingURL=xlsx.service.js.map \n",null]}