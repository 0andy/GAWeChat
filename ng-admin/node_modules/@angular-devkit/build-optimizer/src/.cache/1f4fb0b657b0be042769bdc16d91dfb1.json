{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\charts\\radar\\radar.component.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\charts\\radar\\radar.component.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, HostBinding, ViewChild, ElementRef, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nvar G2RadarComponent = /*@__PURE__*/ (function () {\n    function G2RadarComponent(el, cd) {\n        this.el = el;\n        this.cd = cd;\n        // region: fields\n        this._title = '';\n        this._height = 0;\n        this.padding = [44, 30, 16, 30];\n        this._hasLegend = true;\n        this._tickCount = 4;\n        this.data = [];\n        this.initFlag = false;\n        this.legendData = [];\n    }\n    Object.defineProperty(G2RadarComponent.prototype, \"title\", {\n        set: function (value) {\n            if (value instanceof TemplateRef)\n                this._titleTpl = value;\n            else\n                this._title = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(G2RadarComponent.prototype, \"height\", {\n        get: function () { return this._height; },\n        set: function (value) {\n            this._height = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(G2RadarComponent.prototype, \"hasLegend\", {\n        get: function () { return this._hasLegend; },\n        set: function (value) {\n            this._hasLegend = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(G2RadarComponent.prototype, \"tickCount\", {\n        get: function () { return this._tickCount; },\n        set: function (value) {\n            this._tickCount = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    G2RadarComponent.prototype.handleLegendClick = function (i) {\n        var _this = this;\n        this.legendData[i].checked = !this.legendData[i].checked;\n        if (this.chart) {\n            // const filterItem = this.legendData.filter(l => l.checked).map(l => l.name);\n            this.chart.filter('name', function (val) { return _this.legendData.find(function (w) { return w.name === val; }).checked; });\n            this.chart.repaint();\n        }\n    };\n    G2RadarComponent.prototype.install = function () {\n        if (!this.data || (this.data && this.data.length < 1))\n            return;\n        this.node.nativeElement.innerHTML = '';\n        var colors = [\n            '#1890FF', '#FACC14', '#2FC25B', '#8543E0', '#F04864', '#13C2C2', '#fa8c16', '#a0d911',\n        ];\n        var chart = new G2.Chart({\n            container: this.node.nativeElement,\n            forceFit: true,\n            height: +this.height - (this.hasLegend ? 80 : 22),\n            padding: this.padding\n        });\n        chart.source(this.data, {\n            value: {\n                min: 0,\n                tickCount: this.tickCount\n            }\n        });\n        chart.coord('polar');\n        chart.legend(false);\n        chart.axis('label', {\n            line: null,\n            labelOffset: 8,\n            labels: {\n                label: {\n                    fill: 'rgba(0, 0, 0, .65)'\n                }\n            },\n            grid: {\n                line: {\n                    stroke: '#e9e9e9',\n                    lineWidth: 1,\n                    lineDash: [0, 0]\n                }\n            }\n        });\n        chart.axis('value', {\n            grid: {\n                type: 'polygon',\n                line: {\n                    stroke: '#e9e9e9',\n                    lineWidth: 1,\n                    lineDash: [0, 0]\n                }\n            },\n            labels: {\n                label: {\n                    fill: 'rgba(0, 0, 0, .65)'\n                }\n            }\n        });\n        chart.line().position('label*value').color('name', colors);\n        chart.point().position('label*value').color('name', colors).shape('circle').size(3);\n        chart.render();\n        this.chart = chart;\n        if (this.hasLegend) {\n            this.legendData = chart.getAllGeoms()[0]._attrs.dataArray.map(function (item) {\n                var origin = item[0]._origin;\n                var result = {\n                    name: origin.name,\n                    color: item[0].color,\n                    checked: true,\n                    value: item.reduce(function (p, n) { return p + n._origin.value; }, 0),\n                };\n                return result;\n            });\n            this.cd.markForCheck();\n        }\n    };\n    G2RadarComponent.prototype.uninstall = function () {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = null;\n        }\n    };\n    G2RadarComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.initFlag = true;\n        setTimeout(function () { return _this.install(); }, 100);\n    };\n    G2RadarComponent.prototype.ngOnChanges = function (changes) {\n        if (this.initFlag)\n            this.install();\n    };\n    G2RadarComponent.prototype.ngOnDestroy = function () {\n        this.uninstall();\n    };\n    return G2RadarComponent;\n}());\nexport { G2RadarComponent };\n//# sourceMappingURL=radar.component.js.map \n",null]}