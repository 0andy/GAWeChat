{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\theme\\services\\http\\http.client.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\theme\\services\\http\\http.client.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// tslint:disable:no-console class-name\nimport { Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as moment from 'moment';\nimport { ALAIN_THEME_OPTIONS } from '../../theme.options';\n/**\n * 封装HttpClient，主要解决：\n * + 优化HttpClient在参数上便利性\n * + 统一实现 loading\n * + 统一处理时间格式问题\n */\nvar _HttpClient = /*@__PURE__*/ (function () {\n    function _HttpClient(http, themeOptions) {\n        this.http = http;\n        this.themeOptions = themeOptions;\n        this._loading = false;\n    }\n    Object.defineProperty(_HttpClient.prototype, \"loading\", {\n        /** 是否正在加载中 */\n        get: /** 是否正在加载中 */ function () {\n            return this._loading;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    _HttpClient.prototype.parseParams = function (params) {\n        var ret = new HttpParams();\n        if (params) {\n            // tslint:disable-next-line:forin\n            for (var key in params) {\n                var _data = params[key];\n                // 将时间转化为：时间戳 (秒)\n                if (moment.isDate(_data)) {\n                    _data = moment(_data).unix();\n                }\n                ret = ret.set(key, _data);\n            }\n        }\n        return ret;\n    };\n    _HttpClient.prototype.appliedUrl = function (url, params) {\n        if (!params)\n            return url;\n        url += ~url.indexOf('?') ? '&' : '?';\n        // tslint:disable-next-line:forin\n        for (var key in params) {\n            url += key + \"=\" + params[key];\n        }\n        return url;\n    };\n    _HttpClient.prototype.begin = function () {\n        var _this = this;\n        // console.time('http');\n        setTimeout(function () { return _this._loading = true; });\n    };\n    _HttpClient.prototype.end = function () {\n        var _this = this;\n        // console.timeEnd('http');\n        setTimeout(function () { return _this._loading = false; });\n    };\n    Object.defineProperty(_HttpClient.prototype, \"SERVER_URL\", {\n        /** 服务端URL地址 */\n        get: /** 服务端URL地址 */ function () {\n            return this.themeOptions.SERVER_URL || '/';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * GET 请求\n     */\n    /**\n         * GET 请求\n         */\n    _HttpClient.prototype.get = /**\n         * GET 请求\n         */\n        function (url, params, options) {\n            return this.request('GET', url, Object.assign({\n                params: params\n            }, options));\n        };\n    /**\n     * POST 请求\n     */\n    /**\n         * POST 请求\n         */\n    _HttpClient.prototype.post = /**\n         * POST 请求\n         */\n        function (url, body, params, options) {\n            return this.request('POST', url, Object.assign({\n                body: body,\n                params: params\n            }, options));\n        };\n    /**\n     * POST 请求\n     */\n    /**\n         * POST 请求\n         */\n    _HttpClient.prototype.delete = /**\n         * POST 请求\n         */\n        function (url, params, options) {\n            return this.request('DELETE', url, Object.assign({\n                params: params\n            }, options));\n        };\n    // endregion\n    /**\n     * `jsonp` 请求\n     *\n     * @param {string} url URL地址\n     * @param {*} [params] 请求参数\n     * @param {string} [callbackParam] CALLBACK值，默认：JSONP_CALLBACK\n     */\n    // endregion\n    /**\n         * `jsonp` 请求\n         *\n         * @param {string} url URL地址\n         * @param {*} [params] 请求参数\n         * @param {string} [callbackParam] CALLBACK值，默认：JSONP_CALLBACK\n         */\n    _HttpClient.prototype.jsonp =\n        // endregion\n        /**\n             * `jsonp` 请求\n             *\n             * @param {string} url URL地址\n             * @param {*} [params] 请求参数\n             * @param {string} [callbackParam] CALLBACK值，默认：JSONP_CALLBACK\n             */\n        function (url, params, callbackParam) {\n            var _this = this;\n            if (callbackParam === void 0) {\n                callbackParam = 'JSONP_CALLBACK';\n            }\n            return this.http\n                .jsonp(this.appliedUrl(url, params), callbackParam)\n                .pipe(tap(function () { return _this.end(); }), catchError(function (res) {\n                _this.end();\n                return res;\n            }));\n        };\n    /**\n     * `patch` 请求\n     *\n     * @param {string} url URL地址\n     * @param {*} [body] 请求参数\n     */\n    /**\n         * `patch` 请求\n         *\n         * @param {string} url URL地址\n         * @param {*} [body] 请求参数\n         */\n    _HttpClient.prototype.patch = /**\n         * `patch` 请求\n         *\n         * @param {string} url URL地址\n         * @param {*} [body] 请求参数\n         */\n        function (url, body, params) {\n            return this.request('PATCH', url, Object.assign({\n                params: params,\n                body: body || null\n            }));\n        };\n    /**\n     * `put` 请求\n     *\n     * @param {string} url URL地址\n     * @param {*} [body] 请求参数\n     */\n    /**\n         * `put` 请求\n         *\n         * @param {string} url URL地址\n         * @param {*} [body] 请求参数\n         */\n    _HttpClient.prototype.put = /**\n         * `put` 请求\n         *\n         * @param {string} url URL地址\n         * @param {*} [body] 请求参数\n         */\n        function (url, body, params) {\n            return this.request('PUT', url, Object.assign({\n                params: params,\n                body: body || null\n            }));\n        };\n    /**\n     * `request` 请求\n     *\n     * @param {string} method 请求方法类型\n     * @param {string} url URL地址\n     * @param {*} [options] 参数\n     */\n    /**\n         * `request` 请求\n         *\n         * @param {string} method 请求方法类型\n         * @param {string} url URL地址\n         * @param {*} [options] 参数\n         */\n    _HttpClient.prototype.request = /**\n         * `request` 请求\n         *\n         * @param {string} method 请求方法类型\n         * @param {string} url URL地址\n         * @param {*} [options] 参数\n         */\n        function (method, url, options) {\n            var _this = this;\n            this.begin();\n            if (options) {\n                if (options.params)\n                    options.params = this.parseParams(options.params);\n            }\n            return this.http.request(method, url, options)\n                .pipe(tap(function () { return _this.end(); }), catchError(function (res) {\n                _this.end();\n                return res;\n            }));\n        };\n    return _HttpClient;\n}());\nexport { _HttpClient };\n//# sourceMappingURL=http.client.js.map \n",null]}