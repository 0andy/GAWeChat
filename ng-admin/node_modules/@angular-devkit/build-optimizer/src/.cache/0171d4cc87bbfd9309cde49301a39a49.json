{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\mock\\src\\mock.service.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\mock\\src\\mock.service.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, Inject } from '@angular/core';\nimport { DM_OPTIONS_TOKEN } from '../mock.options';\nvar MockService = /*@__PURE__*/ (function () {\n    function MockService(config) {\n        this.config = config;\n        this.cached = [];\n        this.applyMock();\n        delete this.config.data;\n    }\n    // region: parse rule\n    // region: parse rule\n    MockService.prototype.applyMock =\n        // region: parse rule\n        function () {\n            this.cached = [];\n            try {\n                this.realApplyMock();\n            }\n            catch (e) {\n                this.outputError(e);\n            }\n        };\n    MockService.prototype.realApplyMock = function () {\n        var _this = this;\n        var data = this.config.data;\n        if (!data)\n            return;\n        Object.keys(data).forEach(function (key) {\n            var rules = data[key];\n            if (!rules)\n                return;\n            Object.keys(rules).forEach(function (ruleKey) {\n                var value = rules[ruleKey];\n                if (!(typeof value === 'function' ||\n                    typeof value === 'object' ||\n                    typeof value === 'string'))\n                    throw Error(\"mock value of [\" + key + \"-\" + ruleKey + \"] should be function or object or string, but got \" + typeof value);\n                var rule = _this.genRule(ruleKey, value);\n                if (['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(rule.method) === -1) {\n                    throw Error(\"method of \" + key + \"-\" + ruleKey + \" is not valid\");\n                }\n                var item = _this.cached.find(function (w) { return w.url === rule.url && w.method === rule.method; });\n                if (item) {\n                    item.callback = rule.callback;\n                }\n                else {\n                    _this.cached.push(rule);\n                }\n            });\n        });\n    };\n    MockService.prototype.genRule = function (key, callback) {\n        var method = 'GET';\n        var url = key;\n        if (key.indexOf(' ') > -1) {\n            var splited = key.split(' ');\n            method = splited[0].toLowerCase();\n            url = splited[1];\n        }\n        var martcher = null;\n        var segments = [];\n        if (~url.indexOf(':')) {\n            segments = url.split('/').filter(function (segment) { return segment.startsWith(':'); }).map(function (v) { return v.substring(1); });\n            var reStr = url.split('/').map(function (segment) { return segment.startsWith(':') ? \"([^/]+)\" : segment; }).join('/');\n            martcher = new RegExp(reStr, 'i');\n        }\n        return {\n            url: url,\n            martcher: martcher,\n            segments: segments,\n            callback: callback,\n            method: method.toUpperCase()\n        };\n    };\n    MockService.prototype.outputError = function (error) {\n        if (!error)\n            return;\n        var filePath = error.message.split(': ')[0];\n        var errors = error.stack.split('\\n')\n            .filter(function (line) { return line.trim().indexOf('at ') !== 0; })\n            .map(function (line) { return line.replace(filePath + \": \", ''); });\n        errors.splice(1, 0, ['']);\n        console.group();\n        console.warn(\"==========Failed to parse mock config.==========\");\n        console.log(errors.join('\\n'));\n        console.groupEnd();\n        throw error;\n    };\n    // endregion\n    // endregion\n    MockService.prototype.getRule =\n        // endregion\n        function (method, url) {\n            method = (method || 'GET').toUpperCase();\n            var params = {};\n            var ret = this.cached.find(function (w) { return w.method === method && (w.martcher ? w.martcher.test(url) : w.url === url); }) || null;\n            if (!ret)\n                return null;\n            if (ret.martcher) {\n                var execArr = ret.martcher.exec(url);\n                if (execArr && execArr.length > 0) {\n                    execArr.slice(1).map(function (value, index) {\n                        params[ret.segments[index]] = value;\n                    });\n                }\n            }\n            return {\n                url: url,\n                method: ret.method,\n                params: params,\n                callback: ret.callback\n            };\n        };\n    MockService.prototype.clearCache = function () {\n        this.cached = [];\n    };\n    MockService.prototype.ngOnDestroy = function () {\n        this.clearCache();\n    };\n    return MockService;\n}());\nexport { MockService };\n//# sourceMappingURL=mock.service.js.map \n",null]}