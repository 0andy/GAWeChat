{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\reuse-tab\\reuse-tab.service.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\reuse-tab\\reuse-tab.service.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, Optional, Injector } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { MenuService } from '@delon/theme';\nimport { ReuseTabMatchMode } from './interface';\nvar ReuseTabService = (function () {\n    // endregion\n    function ReuseTabService(injector, menuService) {\n        this.injector = injector;\n        this.menuService = menuService;\n        this._max = 10;\n        this._mode = ReuseTabMatchMode.Menu;\n        this._excludes = [];\n        this._cachedChange = new BehaviorSubject(null);\n        this._cached = [];\n        this._titleCached = {};\n    }\n    Object.defineProperty(ReuseTabService.prototype, \"max\", {\n        // region: public\n        /** 允许最多复用多少个页面，取值范围 `2-100` */\n        set: \n        // region: public\n        /** 允许最多复用多少个页面，取值范围 `2-100` */\n        function (value) {\n            this._max = Math.min(Math.max(value, 2), 100);\n            for (var i = this._cached.length; i > this._max; i--) {\n                this._cached.pop();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReuseTabService.prototype, \"mode\", {\n        /** 设置匹配模式 */\n        set: /** 设置匹配模式 */ function (value) {\n            this._mode = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReuseTabService.prototype, \"excludes\", {\n        /** 排除规则，限 `mode=URL` */\n        set: /** 排除规则，限 `mode=URL` */ function (values) {\n            if (!values)\n                return;\n            this._excludes = values;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** 获取指定路径缓存所在位置，`-1` 表示无缓存 */\n    /** 获取指定路径缓存所在位置，`-1` 表示无缓存 */\n    ReuseTabService.prototype.index = /** 获取指定路径缓存所在位置，`-1` 表示无缓存 */\n        function (url) {\n            return this._cached.findIndex(function (w) { return w.url === url; });\n        };\n    /** 获取指定路径缓存是否存在 */\n    /** 获取指定路径缓存是否存在 */\n    ReuseTabService.prototype.exists = /** 获取指定路径缓存是否存在 */\n        function (url) {\n            return this.index(url) !== -1;\n        };\n    /** 获取指定路径缓存 */\n    /** 获取指定路径缓存 */\n    ReuseTabService.prototype.get = /** 获取指定路径缓存 */\n        function (path) {\n            return path ? this._cached.find(function (w) { return w.url === path; }) || null : null;\n        };\n    ReuseTabService.prototype.destroy = function (_handle) {\n        if (_handle && _handle.componentRef && _handle.componentRef.destroy)\n            _handle.componentRef.destroy();\n    };\n    /**\n     * 根据URL移除标签\n     */\n    /**\n         * 根据URL移除标签\n         */\n    ReuseTabService.prototype.remove = /**\n         * 根据URL移除标签\n         */\n        function (url) {\n            this._cachedChange.next({ active: 'remove', url: url });\n        };\n    /**\n     * 移除指定路径缓存\n     * @private\n     */\n    /**\n         * 移除指定路径缓存\n         * @private\n         */\n    ReuseTabService.prototype._remove = /**\n         * 移除指定路径缓存\n         * @private\n         */\n        function (data) {\n            var url = data;\n            if (typeof data !== 'string') {\n                url = data.url;\n            }\n            this.removeBuffer = url;\n            var idx = this.index(url);\n            var item = idx !== -1 ? this._cached[idx] : null;\n            if (item) {\n                this.destroy(item._handle);\n                this._cached.splice(idx, 1);\n                delete this._titleCached[url];\n            }\n            return true;\n        };\n    /**\n     * 清除所有缓存\n     */\n    /**\n         * 清除所有缓存\n         */\n    ReuseTabService.prototype.clear = /**\n         * 清除所有缓存\n         */\n        function () {\n            var _this = this;\n            this.removeBuffer = null;\n            this._cached.forEach(function (v) { return _this.destroy(v._handle); });\n            this._cached = [];\n            this._cachedChange.next({ active: 'clear' });\n        };\n    /**\n     * 清除标题缓存\n     */\n    /**\n         * 清除标题缓存\n         */\n    ReuseTabService.prototype.clearTitleCached = /**\n         * 清除标题缓存\n         */\n        function () {\n            this._titleCached = {};\n        };\n    Object.defineProperty(ReuseTabService.prototype, \"items\", {\n        /** 获取已缓存的路由 */\n        get: /** 获取已缓存的路由 */ function () {\n            return this._cached;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReuseTabService.prototype, \"count\", {\n        /** 获取当前缓存的路由总数 */\n        get: /** 获取当前缓存的路由总数 */ function () {\n            return this._cached.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReuseTabService.prototype, \"change\", {\n        /** 订阅缓存变更通知 */\n        get: /** 订阅缓存变更通知 */ function () {\n            return this._cachedChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReuseTabService.prototype, \"title\", {\n        /** 设置当前页标题 */\n        set: /** 设置当前页标题 */ function (value) {\n            if (!value)\n                return;\n            this._titleCached[this.getUrl(this.injector.get(ActivatedRoute).snapshot)] = value;\n            this._cachedChange.next({ active: 'title', title: value });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // endregion\n    // region: privates\n    /** @private */\n    // endregion\n    // region: privates\n    /** @private */\n    ReuseTabService.prototype._clearRemoveBuffer =\n        // endregion\n        // region: privates\n        /** @private */\n        function () {\n            this.removeBuffer = null;\n        };\n    /** @private */\n    /** @private */\n    ReuseTabService.prototype.getTitle = /** @private */\n        function (url, route) {\n            if (this._titleCached[url])\n                return this._titleCached[url];\n            if (route && route.data && (route.data.reuseTitle || route.data.title))\n                return route.data.reuseTitle || route.data.title;\n            if (!this.menuService)\n                return url;\n            var list = this.menuService.getPathByUrl(url);\n            var item = list.pop();\n            return item ? item.text : url;\n        };\n    ReuseTabService.prototype.getTruthRoute = function (route) {\n        var next = route;\n        while (next.firstChild)\n            next = next.firstChild;\n        return next;\n    };\n    ReuseTabService.prototype.getUrl = function (route) {\n        var next = this.getTruthRoute(route);\n        var segments = [];\n        while (next) {\n            segments.push(next.url.join('/'));\n            next = next.parent;\n        }\n        var url = '/' + segments.filter(function (i) { return i; }).reverse().join('/');\n        return url;\n    };\n    ReuseTabService.prototype.getMenu = function (url) {\n        var menus = this.menuService ? this.menuService.getPathByUrl(url) : [];\n        if (!menus || menus.length === 0)\n            return null;\n        return menus.pop();\n    };\n    /** @private */\n    /** @private */\n    ReuseTabService.prototype.getClosable = /** @private */\n        function (url, route) {\n            if (route && route.data && typeof route.data.reuseClosable !== 'undefined')\n                return route.data.reuseClosable;\n            var menu = this._mode !== ReuseTabMatchMode.URL ? this.getMenu(url) : null;\n            if (menu && typeof menu.reuseClosable !== 'undefined')\n                return menu.reuseClosable;\n            return true;\n        };\n    ReuseTabService.prototype.can = function (route) {\n        var url = this.getUrl(route);\n        if (url === this.removeBuffer)\n            return false;\n        if (route.data && typeof route.data.reuse === 'boolean')\n            return route.data.reuse;\n        if (this._mode !== ReuseTabMatchMode.URL) {\n            var menu = this.getMenu(url);\n            if (!menu)\n                return false;\n            if (this._mode === ReuseTabMatchMode.Menu) {\n                if (menu.reuse === false)\n                    return false;\n            }\n            else {\n                if (!menu.reuse || menu.reuse !== true)\n                    return false;\n            }\n            return true;\n        }\n        var idx = 0;\n        if (url)\n            idx = this._excludes.findIndex(function (r) { return r.test(url); });\n        return idx === -1;\n    };\n    /**\n     * 决定是否允许路由复用，若 `true` 会触发 `store`\n     */\n    /**\n         * 决定是否允许路由复用，若 `true` 会触发 `store`\n         */\n    ReuseTabService.prototype.shouldDetach = /**\n         * 决定是否允许路由复用，若 `true` 会触发 `store`\n         */\n        function (route) {\n            if (!route.routeConfig || route.routeConfig.loadChildren || route.routeConfig.children)\n                return false;\n            return this.can(route);\n        };\n    /**\n     * 存储\n     */\n    /**\n         * 存储\n         */\n    ReuseTabService.prototype.store = /**\n         * 存储\n         */\n        function (_snapshot, _handle) {\n            if (!_snapshot.routeConfig || _snapshot.routeConfig.loadChildren || _snapshot.routeConfig.children)\n                return;\n            if (this.count >= this._max)\n                this._cached.shift();\n            var url = this.getUrl(_snapshot);\n            var idx = this.index(url);\n            var item = {\n                customTitle: this._titleCached[url],\n                title: this.getTitle(url, _snapshot),\n                // closable: this.getClosable(url, _snapshot),\n                url: url,\n                _snapshot: _snapshot,\n                _handle: _handle\n            };\n            if (idx === -1) {\n                this._cached.push(item);\n            }\n            else {\n                this._cached[idx] = item;\n            }\n            this._clearRemoveBuffer();\n            this._cachedChange.next({ active: 'add', item: item });\n        };\n    /**\n     * 决定是否允许应用缓存数据\n     */\n    /**\n         * 决定是否允许应用缓存数据\n         */\n    ReuseTabService.prototype.shouldAttach = /**\n         * 决定是否允许应用缓存数据\n         */\n        function (route) {\n            if (!route.routeConfig || route.routeConfig.loadChildren || route.routeConfig.children)\n                return false;\n            var url = this.getUrl(route);\n            var data = this.get(url);\n            var ret = !!(data && data._handle);\n            return ret;\n        };\n    /**\n     * 提取复用数据\n     */\n    /**\n         * 提取复用数据\n         */\n    ReuseTabService.prototype.retrieve = /**\n         * 提取复用数据\n         */\n        function (route) {\n            if (!route.routeConfig || route.routeConfig.loadChildren || route.routeConfig.children)\n                return null;\n            var url = this.getUrl(route);\n            var data = this.get(url);\n            return (data && data._handle) || null;\n        };\n    /**\n     * 决定是否应该进行复用路由处理\n     */\n    /**\n         * 决定是否应该进行复用路由处理\n         */\n    ReuseTabService.prototype.shouldReuseRoute = /**\n         * 决定是否应该进行复用路由处理\n         */\n        function (future, curr) {\n            return future.routeConfig === curr.routeConfig;\n        };\n    ReuseTabService.prototype.ngOnDestroy = function () {\n        this._cached = null;\n        this._cachedChange.unsubscribe();\n    };\n    return ReuseTabService;\n}());\nexport { ReuseTabService };\n//# sourceMappingURL=reuse-tab.service.js.map \n",null]}