{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\simple-table\\simple-table.component.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\simple-table\\simple-table.component.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\nimport { Component, Inject, Input, Output, EventEmitter, Renderer2, ElementRef, ContentChild, Optional } from '@angular/core';\nimport { _HttpClient, CNCurrencyPipe, MomentDatePipe, YNPipe, ModalHelper, ALAIN_I18N_TOKEN } from '@delon/theme';\nimport { ACLService } from '@delon/acl';\nimport { tap, map } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SimpleTableConfig } from './simple-table.config';\nimport { deepGet } from '../utils/utils';\nimport { SimpleTableExport } from './simple-table-export';\nvar SimpleTableComponent = (function () {\n    // endregion\n    function SimpleTableComponent(defConfig, _http, el, renderer, exportSrv, acl, i18nSrv, modal, currenty, date, yn) {\n        this._http = _http;\n        this.el = el;\n        this.renderer = renderer;\n        this.exportSrv = exportSrv;\n        this.acl = acl;\n        this.i18nSrv = i18nSrv;\n        this.modal = modal;\n        this.currenty = currenty;\n        this.date = date;\n        this.yn = yn;\n        this._data = [];\n        this._isAjax = false;\n        this._isPagination = true;\n        this._classMap = [];\n        this._allChecked = false;\n        this._indeterminate = false;\n        this._sortMap = {};\n        this._sortColumn = null;\n        this._footer = false;\n        this._columns = [];\n        /** 请求方法 */\n        this.reqMehtod = 'GET';\n        /** 请求异常时回调 */\n        this.reqError = new EventEmitter();\n        /**\n             * 重命名返回参数 `total`、`list`\n             * - `{ total: 'Total' }` => Total 会被当作 `total`\n             */\n        this.resReName = { total: ['total'], list: ['list'] };\n        /** 列描述  */\n        this.columns = [];\n        this._ps = 10;\n        this._pi = 1;\n        this._total = 0;\n        this._loading = false;\n        this._bordered = false;\n        /** table大小 */\n        this.size = 'default';\n        this._showSizeChanger = false;\n        /** pagination中每页显示条目数下拉框值 */\n        this.pageSizeSelectorValues = [10, 20, 30, 40, 50];\n        this._showQuickJumper = false;\n        this._showTotal = false;\n        this._isPageIndexReset = true;\n        /** 分页方向 */\n        this.pagePlacement = 'right';\n        this._toTopInChange = true;\n        this._toTopOffset = 0;\n        /** 页码、每页数量变化时回调 */\n        this.change = new EventEmitter();\n        /** checkbox变化时回调，参数为当前所选清单 */\n        this.checkboxChange = new EventEmitter();\n        /** radio变化时回调，参数为当前所选 */\n        this.radioChange = new EventEmitter();\n        /** 排序回调 */\n        this.sortChange = new EventEmitter();\n        /** Filter回调 */\n        this.filterChange = new EventEmitter();\n        Object.assign(this, defConfig);\n    }\n    Object.defineProperty(SimpleTableComponent.prototype, \"ps\", {\n        get: /** 每页数量，当设置为 `0` 表示不分页，默认：`10` */ function () { return this._ps; },\n        set: function (value) {\n            this._ps = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleTableComponent.prototype, \"pi\", {\n        get: /** 当前页码 */ function () { return this._pi; },\n        set: function (value) {\n            this._pi = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleTableComponent.prototype, \"total\", {\n        get: /** 数据总量 */ function () { return this._total; },\n        set: function (value) {\n            this._total = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleTableComponent.prototype, \"loading\", {\n        get: /** 是否显示Loading */ function () { return this._loading; },\n        set: function (value) {\n            this._loading = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleTableComponent.prototype, \"bordered\", {\n        get: /** 是否显示边框 */ function () { return this._bordered; },\n        set: function (value) {\n            this._bordered = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleTableComponent.prototype, \"showSizeChanger\", {\n        get: /** 是否显示pagination中改变页数 */ function () { return this._showSizeChanger; },\n        set: function (value) {\n            this._showSizeChanger = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleTableComponent.prototype, \"showQuickJumper\", {\n        get: /** 是否显示pagination中快速跳转 */ function () { return this._showQuickJumper; },\n        set: function (value) {\n            this._showQuickJumper = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleTableComponent.prototype, \"showTotal\", {\n        get: /** 是否显示总数据量 */ function () { return this._showTotal; },\n        set: function (value) {\n            this._showTotal = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleTableComponent.prototype, \"isPageIndexReset\", {\n        get: /** 数据变更后是否保留在数据变更前的页码 */ function () { return this._isPageIndexReset; },\n        set: function (value) {\n            this._isPageIndexReset = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleTableComponent.prototype, \"toTopInChange\", {\n        get: /** 切换分页时返回顶部 */ function () { return this._toTopInChange; },\n        set: function (value) {\n            this._toTopInChange = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleTableComponent.prototype, \"toTopOffset\", {\n        get: /** 返回顶部偏移值 */ function () { return this._toTopOffset; },\n        set: function (value) {\n            this._toTopOffset = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // region: data\n    // region: data\n    SimpleTableComponent.prototype.getAjaxData =\n        // region: data\n        function (url) {\n            var _this = this;\n            var params = {};\n            params[this.reqReName && this.reqReName['pi'] || 'pi'] = this.pi;\n            params[this.reqReName && this.reqReName['ps'] || 'ps'] = this.ps;\n            return this._http.request(this.reqMehtod, url || this._url, {\n                params: Object.assign(params, this.extraParams, this.getReqSortMap(), this.getReqFilterMap()),\n                body: this.reqBody,\n                headers: this.reqHeaders\n            }).pipe(map(function (res) {\n                var ret = deepGet(res, _this.resReName.list, null);\n                if (typeof ret === 'undefined') {\n                    console.warn(\"results muse contain '\" + _this.resReName.list.join('.') + \"' attribute.\");\n                    return;\n                }\n                if (!Array.isArray(ret)) {\n                    console.warn(\"'\" + _this.resReName.list.join('.') + \"' muse be array type.\");\n                    return;\n                }\n                // total\n                var retTotal = _this.resReName.total && deepGet(res, _this.resReName.total, null);\n                if (typeof retTotal === 'undefined') {\n                    if (_this.resReName.total)\n                        console.warn(\"results muse contain '\" + _this.resReName.total.join('.') + \"' attribute.\");\n                    return;\n                }\n                _this.total = +retTotal;\n                return ret;\n            }));\n        };\n    SimpleTableComponent.prototype.load = function (pi) {\n        if (pi === void 0) {\n            pi = 1;\n        }\n        this.pi = pi;\n        this._change('pi');\n    };\n    SimpleTableComponent.prototype._change = function (type) {\n        this._genAjax();\n        this._genData();\n        this._toTop();\n        this.change.emit({\n            type: type,\n            pi: this.pi,\n            ps: this.ps,\n            total: this.total\n        });\n    };\n    SimpleTableComponent.prototype._genAjax = function (forceRefresh) {\n        var _this = this;\n        if (forceRefresh === void 0) {\n            forceRefresh = false;\n        }\n        if (!this._isAjax)\n            return;\n        this.loading = true;\n        if (forceRefresh === true)\n            this.pi = 1;\n        this.getAjaxData().subscribe(function (res) { return _this._subscribeData(res); }, function (err) {\n            _this.loading = false;\n            _this.reqError.emit(err);\n        });\n    };\n    SimpleTableComponent.prototype._genData = function (forceRefresh) {\n        if (forceRefresh === void 0) {\n            forceRefresh = false;\n        }\n        if (this._isAjax)\n            return;\n        var data = this.data || [];\n        // sort\n        data = data.slice(0);\n        var sorterFn = this.getSorterFn();\n        if (sorterFn) {\n            data = this.recursiveSort(data, sorterFn);\n        }\n        // filter\n        this._columns.filter(function (w) { return w.filters && w.filters.length; }).forEach(function (c) {\n            var values = c.filters.filter(function (w) { return w.checked; });\n            if (values.length === 0)\n                return;\n            var onFilter = c.filter;\n            data = data.filter(function (record) {\n                return values.some(function (v) { return onFilter(v, record); });\n            });\n        });\n        if (forceRefresh) {\n            if (this.isPageIndexReset) {\n                this.pi = 1;\n            }\n            else {\n                var maxPageIndex = Math.ceil(data.length / this.ps);\n                this.pi = !this.pi ? 1 : (this.pi > maxPageIndex ? maxPageIndex : this.pi);\n            }\n        }\n        this.total = this.total <= 0 ? data.length : this.total;\n        this._isPagination = this.ps > 0 && this.total > this.ps;\n        this._subscribeData(data.slice((this.pi - 1) * this.ps, this.pi * this.ps));\n    };\n    SimpleTableComponent.prototype._toTop = function () {\n        if (!this.toTopInChange)\n            return;\n        if (this.scroll) {\n            this.el.nativeElement.querySelector('.ant-table-body').scrollTo(0, 0);\n            return;\n        }\n        if (this.el.nativeElement.scrollIntoView)\n            this.el.nativeElement.scrollIntoView();\n        // todo: toTopOffset\n    };\n    SimpleTableComponent.prototype._get = function (item, col) {\n        if (col.format)\n            return col.format(item, col);\n        var ret = deepGet(item, col.index, '');\n        if (typeof ret === 'undefined')\n            return '';\n        switch (col.type) {\n            case 'img':\n                return \"<img src=\\\"\" + ret + \"\\\" class=\\\"img\\\">\";\n            case 'currency':\n                return this.currenty.transform(ret);\n            case 'date':\n                return this.date.transform(ret, col.dateFormat);\n            case 'yn':\n                return this.yn.transform(ret === col.ynTruth, col.ynYes, col.ynNo);\n        }\n        return ret;\n    };\n    SimpleTableComponent.prototype.getDataObs = function (urlOrData) {\n        return urlOrData || Array.isArray(this.data) ? of(urlOrData || this.data) : this.data;\n    };\n    SimpleTableComponent.prototype.processData = function () {\n        var _this = this;\n        if (!this.data && !this.url) {\n            this._isAjax = false;\n            this.data = [];\n            return;\n        }\n        this._isAjax = false;\n        if (typeof this.data === 'string' || this.url) {\n            this._url = this.url || this.data;\n            this._isAjax = true;\n            this._genAjax(true);\n        }\n        else if (Array.isArray(this.data)) {\n            this._genData(true);\n        }\n        else {\n            if (!this.data$) {\n                this.data$ = this.data.pipe(tap(function () { return _this.loading = true; })).subscribe(function (res) {\n                    _this.data = res;\n                    _this._genData(true);\n                });\n            }\n        }\n    };\n    SimpleTableComponent.prototype._subscribeData = function (res) {\n        if (this.preDataChange)\n            res = this.preDataChange(res);\n        this.loading = false;\n        this._data = res;\n        this._refCheck();\n    };\n    // endregion\n    // region: sort\n    // endregion\n    // region: sort\n    SimpleTableComponent.prototype.getReqSortMap =\n        // endregion\n        // region: sort\n        function () {\n            var ret = {};\n            if (!this._sortOrder)\n                return ret;\n            var mapData = this._sortMap[this._sortIndex];\n            ret[mapData.key] =\n                (this._sortColumn.sortReName || this.sortReName || {})[mapData.v] || mapData.v;\n            return ret;\n        };\n    SimpleTableComponent.prototype.recursiveSort = function (data, sorterFn) {\n        var _this = this;\n        var childrenColumnName = 'children';\n        return data.sort(sorterFn).map(function (item) {\n            return (item[childrenColumnName] ? __assign({}, item, (_a = {}, _a[childrenColumnName] = _this.recursiveSort(item[childrenColumnName], sorterFn), _a)) : item);\n            var _a;\n        });\n    };\n    SimpleTableComponent.prototype.getSorterFn = function () {\n        var _this = this;\n        // _sortMap\n        if (!this._sortOrder || !this._sortColumn || typeof this._sortColumn.sorter !== 'function') {\n            return;\n        }\n        return function (a, b) {\n            var result = _this._sortColumn.sorter(a, b);\n            if (result !== 0) {\n                return (_this._sortOrder === 'descend') ? -result : result;\n            }\n            return 0;\n        };\n    };\n    SimpleTableComponent.prototype.sort = function (index, value) {\n        var _this = this;\n        if (this._sortIndex === index && this._sortOrder === value)\n            return;\n        this._sortColumn = this._columns[index];\n        this._sortOrder = value;\n        this._sortIndex = index;\n        Object.keys(this._sortMap).forEach(function (key) { return _this._sortMap[key].v = +key === index ? value : null; });\n        this._genAjax(true);\n        this._genData(true);\n        this.sortChange.emit({ value: value, map: this.getReqSortMap(), column: this._sortColumn });\n    };\n    // endregion\n    // region: filter\n    // endregion\n    // region: filter\n    SimpleTableComponent.prototype.getReqFilterMap =\n        // endregion\n        // region: filter\n        function () {\n            var ret = {};\n            this._columns.filter(function (w) { return w.filtered === true; }).forEach(function (col) {\n                var values = col.filters.filter(function (f) { return f.checked === true; });\n                var obj = {};\n                if (col.filterReName)\n                    obj = col.filterReName(col.filters, col);\n                else\n                    obj[col.filterKey || col.indexKey] = values.map(function (i) { return i.value; }).join(',');\n                ret = Object.assign(ret, obj);\n            });\n            return ret;\n        };\n    SimpleTableComponent.prototype.handleFilter = function (col) {\n        col.filtered = col.filters.findIndex(function (w) { return w.checked; }) !== -1;\n        this._genAjax(true);\n        this._genData(true);\n        this.filterChange.emit(col);\n    };\n    SimpleTableComponent.prototype.filterConfirm = function (col) {\n        this.handleFilter(col);\n    };\n    SimpleTableComponent.prototype.filterClear = function (col) {\n        col.filters.forEach(function (i) { return i.checked = false; });\n        this.handleFilter(col);\n    };\n    SimpleTableComponent.prototype.filterRadio = function (col, item, checked) {\n        col.filters.forEach(function (i) { return i.checked = false; });\n        item.checked = checked;\n    };\n    // endregion\n    // region: checkbox\n    // endregion\n    // region: checkbox\n    SimpleTableComponent.prototype._checkAll =\n        // endregion\n        // region: checkbox\n        function () {\n            var _this = this;\n            this._data.filter(function (w) { return !w.disabled; }).forEach(function (i) { return i.checked = _this._allChecked; });\n            this._refCheck();\n            this.checkboxChange.emit(this._data.filter(function (w) { return w.checked === true; }));\n        };\n    SimpleTableComponent.prototype._checkSelection = function (i) {\n        this.checkboxChange.emit(this._data.filter(function (w) { return w.checked === true; }));\n    };\n    SimpleTableComponent.prototype._refCheck = function () {\n        var validData = this._data.filter(function (w) { return !w.disabled; });\n        var checkedList = validData.filter(function (w) { return w.checked === true; });\n        this._allChecked = checkedList.length > 0 && checkedList.length === validData.length;\n        var allUnChecked = validData.every(function (value) { return !value.checked; });\n        this._indeterminate = (!this._allChecked) && (!allUnChecked);\n    };\n    SimpleTableComponent.prototype._rowSelection = function (row) {\n        if (row.select)\n            row.select(this._data);\n        this._refCheck();\n        this.checkboxChange.emit(this._data.filter(function (w) { return !w.disabled && w.checked === true; }));\n    };\n    // endregion\n    // region: radio\n    // endregion\n    // region: radio\n    SimpleTableComponent.prototype._refRadio =\n        // endregion\n        // region: radio\n        function (idx, checked) {\n            this._data.forEach(function (i) { return i.checked = false; });\n            this._data[idx].checked = checked;\n            this.radioChange.emit({ checked: checked, item: this._data[idx] });\n        };\n    // endregion\n    // region: buttons\n    // endregion\n    // region: buttons\n    SimpleTableComponent.prototype.btnClick =\n        // endregion\n        // region: buttons\n        function (record, btn) {\n            if (btn.type === 'modal' || btn.type === 'static') {\n                this.modal[btn.type === 'modal' ? 'open' : 'static'](btn.component, Object.assign({\n                    record: record\n                }, btn.params && btn.params(record)), btn.size, btn.modalOptions).subscribe(function (res) {\n                    if (btn.click)\n                        btn.click(record, res);\n                });\n                return;\n            }\n            if (btn.click)\n                btn.click(record);\n        };\n    SimpleTableComponent.prototype.btnText = function (record, btn) {\n        if (btn.format)\n            return btn.format(record, btn);\n        return btn.text;\n    };\n    // endregion\n    // region: export\n    /**\n     * 导出Excel，确保已经注册 `AdXlsxModule`\n     * @param urlOrData 重新指定数据，例如希望导出所有数据非常有用\n     * @param opt 额外参数\n     */\n    // endregion\n    // region: export\n    /**\n         * 导出Excel，确保已经注册 `AdXlsxModule`\n         * @param urlOrData 重新指定数据，例如希望导出所有数据非常有用\n         * @param opt 额外参数\n         */\n    SimpleTableComponent.prototype.export =\n        // endregion\n        // region: export\n        /**\n             * 导出Excel，确保已经注册 `AdXlsxModule`\n             * @param urlOrData 重新指定数据，例如希望导出所有数据非常有用\n             * @param opt 额外参数\n             */\n        function (urlOrData, opt) {\n            var _this = this;\n            ((!urlOrData && this._isAjax) || (urlOrData && typeof urlOrData === 'string') ?\n                this.getAjaxData(urlOrData) :\n                this.getDataObs(urlOrData))\n                .subscribe(function (res) {\n                return _this.exportSrv.export(Object.assign({}, opt, {\n                    _d: res,\n                    _c: _this._columns\n                }));\n            });\n        };\n    // endregion\n    // endregion\n    SimpleTableComponent.prototype.ngOnInit =\n        // endregion\n        function () {\n        };\n    SimpleTableComponent.prototype.ngAfterViewInit = function () {\n        this._footer = !!this.footer;\n    };\n    SimpleTableComponent.prototype.addRow = function (row) {\n        var col = this._columns.find(function (w) { return w.render === row.id; });\n        if (col)\n            col.__render = row.templateRef;\n    };\n    SimpleTableComponent.prototype.updateStatus = function () {\n        var _this = this;\n        if (this.data && this.url)\n            throw new Error(\"data & url property muse be either-or\");\n        this.setClass();\n        // columns\n        if (!this.columns || this.columns.length === 0)\n            throw new Error(\"the columns property muse be define!\");\n        if (this._columns.length === 0) {\n            var checkboxCount = 0;\n            var radioCount = 0;\n            var sortMap = {};\n            var idx = 0;\n            var newColumns = [];\n            for (var _i = 0, _a = this.columns; _i < _a.length; _i++) {\n                var item = _a[_i];\n                if (this.acl && item.acl && !this.acl.can(item.acl))\n                    continue;\n                if (item.index) {\n                    if (!Array.isArray(item.index))\n                        item.index = item.index.split('.');\n                    item.indexKey = item.index.join('.');\n                }\n                // rowSelection\n                if (!item.selections)\n                    item.selections = [];\n                if (item.type === 'checkbox') {\n                    ++checkboxCount;\n                    if (!item.width)\n                        item.width = (item.selections.length > 0 ? 60 : 50) + \"px\";\n                }\n                if (item.type === 'radio') {\n                    ++radioCount;\n                    item.selections = [];\n                    if (!item.width)\n                        item.width = '50px';\n                }\n                if (!item.className) {\n                    item.className = {\n                        // 'checkbox': 'text-center',\n                        // 'radio': 'text-center',\n                        'currency': 'text-right',\n                        'date': 'text-center'\n                    }[item.type];\n                }\n                if (item.type === 'yn' && typeof item.ynTruth === 'undefined')\n                    item.ynTruth = true;\n                // sorter\n                if (item.sorter) {\n                    sortMap[idx] = { v: item.sort, key: item.sortKey || item.indexKey };\n                    if (item.sort && !this._sortColumn) {\n                        this._sortColumn = item;\n                        this._sortOrder = item.sort;\n                        this._sortIndex = idx;\n                    }\n                }\n                // filter\n                if (!item.filter || !item.filters)\n                    item.filters = [];\n                if (typeof item.filterMultiple === 'undefined')\n                    item.filterMultiple = true;\n                if (!item.filterConfirmText)\n                    item.filterConfirmText = \"\\u786E\\u8BA4\";\n                if (!item.filterClearText)\n                    item.filterClearText = \"\\u91CD\\u7F6E\";\n                if (!item.filterIcon)\n                    item.filterIcon = \"anticon anticon-filter\";\n                item.filtered = item.filters.findIndex(function (w) { return w.checked; }) !== -1;\n                if (this.acl) {\n                    item.selections = item.selections.filter(function (w) { return !w.acl || _this.acl.can(w.acl); });\n                    item.filters = item.filters.filter(function (w) { return !w.acl || _this.acl.can(w.acl); });\n                }\n                // buttons\n                var buttons = [];\n                if (item.buttons) {\n                    for (var _b = 0, _e = item.buttons; _b < _e.length; _b++) {\n                        var btn = _e[_b];\n                        if (this.acl && btn.acl && !this.acl.can(btn.acl))\n                            continue;\n                        if (btn.type === 'del' && typeof btn.pop === 'undefined')\n                            btn.pop = true;\n                        if (btn.pop === true) {\n                            btn._type = 2;\n                            if (typeof btn.popTitle === 'undefined')\n                                btn.popTitle = \"\\u786E\\u8BA4\\u5220\\u9664\\u5417\\uFF1F\";\n                        }\n                        if (btn.children && btn.children.length > 0) {\n                            btn._type = 3;\n                        }\n                        if (!btn._type)\n                            btn._type = 1;\n                        // i18n\n                        if (btn.i18n && this.i18nSrv)\n                            btn.text = this.i18nSrv.fanyi(btn.i18n);\n                        buttons.push(btn);\n                    }\n                    if (buttons.length === 0)\n                        continue;\n                }\n                item.buttons = buttons;\n                // i18n\n                if (item.i18n && this.i18nSrv)\n                    item.title = this.i18nSrv.fanyi(item.i18n);\n                ++idx;\n                newColumns.push(item);\n            }\n            this._columns = newColumns;\n            if (checkboxCount > 1)\n                throw new Error(\"just only one column checkbox\");\n            if (radioCount > 1)\n                throw new Error(\"just only one column radio\");\n            this._sortMap = sortMap;\n        }\n        // reqReName\n        if (this.reqReName) {\n        }\n        // resReName\n        if (this.resReName) {\n            if (this.resReName.list)\n                if (!Array.isArray(this.resReName.list))\n                    this.resReName.list = this.resReName.list.split('.');\n                else\n                    this.resReName.list = ['list'];\n            if (this.resReName.total)\n                if (!Array.isArray(this.resReName.total))\n                    this.resReName.total = this.resReName.total.split('.');\n                else\n                    this.resReName.total = ['total'];\n        }\n        else {\n            this.resReName = { total: ['total'], list: ['list'] };\n        }\n    };\n    SimpleTableComponent.prototype.setClass = function () {\n        var _this = this;\n        this._classMap.forEach(function (cls) { return _this.renderer.removeClass(_this.el.nativeElement, cls); });\n        this._classMap = [];\n        if (this.pagePlacement)\n            this._classMap.push('page-' + this.pagePlacement);\n        this._classMap.forEach(function (cls) { return _this.renderer.addClass(_this.el.nativeElement, cls); });\n    };\n    SimpleTableComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.columns)\n            this._columns = [];\n        this.updateStatus();\n        if (changes.data || changes.url) {\n            this.processData();\n        }\n    };\n    SimpleTableComponent.prototype.ngOnDestroy = function () {\n        if (this.data$) {\n            this.data$.unsubscribe();\n            this.data$ = null;\n        }\n    };\n    return SimpleTableComponent;\n}());\nexport { SimpleTableComponent };\n//# sourceMappingURL=simple-table.component.js.map \n",null]}