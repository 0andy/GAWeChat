{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\cache\\src\\cache.service.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\cache\\src\\cache.service.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as moment from 'moment';\nimport { Observable } from 'rxjs/Observable';\nimport { tap, map } from 'rxjs/operators';\nimport { DC_STORE_STORAGE_TOKEN } from './interface';\nimport { DC_OPTIONS_TOKEN } from '../cache.options';\nvar CacheService = /*@__PURE__*/ (function () {\n    function CacheService(options, store, http) {\n        this.options = options;\n        this.store = store;\n        this.http = http;\n        this.memory = new Map();\n        this.meta = new Set();\n        this.loadMeta();\n    }\n    CacheService.prototype.deepGet = function (obj, path, defaultValue) {\n        if (!obj)\n            return defaultValue;\n        if (path.length <= 1) {\n            var checkObj = path.length ? obj[path[0]] : obj;\n            return typeof checkObj === 'undefined' ? defaultValue : checkObj;\n        }\n        return path.reduce(function (o, k) { return (o || {})[k]; }, obj) || defaultValue;\n    };\n    // region: meta\n    // region: meta\n    CacheService.prototype.pushMeta =\n        // region: meta\n        function (key) {\n            if (this.meta.has(key))\n                return;\n            this.meta.add(key);\n            this.saveMeta();\n        };\n    CacheService.prototype.removeMeta = function (key) {\n        if (!this.meta.has(key))\n            return;\n        this.meta.delete(key);\n        this.saveMeta();\n    };\n    CacheService.prototype.loadMeta = function () {\n        var _this = this;\n        var ret = this.store.get(this.options.meta_key);\n        if (ret && ret.v) {\n            ret.v.forEach(function (key) { return _this.meta.add(key); });\n        }\n    };\n    CacheService.prototype.saveMeta = function () {\n        var metaData = [];\n        this.meta.forEach(function (key) { return metaData.push(key); });\n        this.store.set(this.options.meta_key, { v: metaData, e: 0 });\n    };\n    /**\n     * 缓存对象\n     */\n    /**\n         * 缓存对象\n         */\n    CacheService.prototype.set = /**\n         * 缓存对象\n         */\n        function (key, data, options) {\n            var _this = this;\n            if (options === void 0) {\n                options = {};\n            }\n            // expire\n            var e = 0;\n            if (options.expire && options.expire.length > 1) {\n                var vn = options.expire.split(/(\\d+)/).filter(Boolean);\n                e = moment().add(+vn[0], vn[1]).unix();\n            }\n            if (!(data instanceof Observable)) {\n                this.save(options.type, key, { v: data, e: e });\n                return;\n            }\n            return data.pipe(tap(function (v) {\n                _this.save(options.type, key, { v: v, e: e });\n            }));\n        };\n    CacheService.prototype.save = function (type, key, value) {\n        if (type === 'm') {\n            this.memory.set(key, value);\n        }\n        else {\n            this.store.set(this.options.prefix + key, value);\n            this.pushMeta(key);\n        }\n    };\n    CacheService.prototype.get = function (key, options) {\n        var _this = this;\n        if (options === void 0) {\n            options = {};\n        }\n        var value = this.memory.has(key) ? this.memory.get(key) : this.store.get(this.options.prefix + key);\n        if (!value || (value.e && value.e > 0 && value.e < moment().unix())) {\n            if (options.mode !== 'none' && this.options.mode === 'promise') {\n                return this.http.get(key).pipe(map(function (ret) { return _this.deepGet(ret, _this.options.reName, null); }), tap(function (v) { return _this.set(key, v); }));\n            }\n            return null;\n        }\n        return value.v;\n    };\n    /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\n    /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\n    CacheService.prototype.getNone = /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\n        function (key) {\n            return this.get(key, { mode: 'none' });\n        };\n    /**\n     * 获取缓存，若不存在则设置缓存对象\n     */\n    /**\n         * 获取缓存，若不存在则设置缓存对象\n         */\n    CacheService.prototype.tryGet = /**\n         * 获取缓存，若不存在则设置缓存对象\n         */\n        function (key, data, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var ret = this.getNone(key);\n            if (ret === null) {\n                if (!(data instanceof Observable)) {\n                    this.set(key, data, options);\n                    return data;\n                }\n                return this.set(key, data, options);\n            }\n            return ret;\n        };\n    // endregion\n    // region: has\n    /** 是否缓存 `key` */\n    // endregion\n    // region: has\n    /** 是否缓存 `key` */\n    CacheService.prototype.has =\n        // endregion\n        // region: has\n        /** 是否缓存 `key` */\n        function (key) {\n            return this.memory.has(key) || this.meta.has(key);\n        };\n    // endregion\n    // region: remove\n    /** 移除缓存 */\n    // endregion\n    // region: remove\n    /** 移除缓存 */\n    CacheService.prototype.remove =\n        // endregion\n        // region: remove\n        /** 移除缓存 */\n        function (key) {\n            if (this.memory.has(key)) {\n                this.memory.delete(key);\n                return;\n            }\n            this.store.remove(this.options.prefix + key);\n            this.removeMeta(key);\n        };\n    /** 清空所有缓存 */\n    /** 清空所有缓存 */\n    CacheService.prototype.clear = /** 清空所有缓存 */\n        function () {\n            var _this = this;\n            this.memory.clear();\n            this.meta.forEach(function (key) { return _this.store.remove(_this.options.prefix + key); });\n        };\n    // endregion\n    // endregion\n    CacheService.prototype.ngOnDestroy =\n        // endregion\n        function () {\n            this.memory.clear();\n        };\n    return CacheService;\n}());\nexport { CacheService };\n//# sourceMappingURL=cache.service.js.map \n",null]}