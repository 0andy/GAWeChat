{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\utils\\lazy.service.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\utils\\lazy.service.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { share } from 'rxjs/operators';\nvar LazyService = /*@__PURE__*/ (function () {\n    function LazyService(doc) {\n        this.doc = doc;\n        this.list = {};\n        this._notify = new BehaviorSubject(null);\n    }\n    Object.defineProperty(LazyService.prototype, \"change\", {\n        get: function () {\n            return this._notify.asObservable().pipe(share());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LazyService.prototype.load = function (paths) {\n        var _this = this;\n        var promises = [];\n        if (!Array.isArray(paths))\n            paths = [paths];\n        paths.forEach(function (path) {\n            if (path.endsWith('.js'))\n                promises.push(_this.loadScript(path));\n            else\n                promises.push(_this.loadStyle(path));\n        });\n        return Promise.all(promises).then(function (res) {\n            _this._notify.next(true);\n        });\n    };\n    LazyService.prototype.loadScript = function (path) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.list[path] === true) {\n                resolve({\n                    path: path,\n                    loaded: true,\n                    status: 'Loaded'\n                });\n                return;\n            }\n            _this.list[path] = true;\n            var node = _this.doc.createElement('script');\n            node.type = 'text/javascript';\n            node.src = path;\n            node.charset = 'utf-8';\n            if (node.readyState) {\n                // IE\n                node.onreadystatechange = function () {\n                    if (node.readyState === 'loaded' || node.readyState === 'complete') {\n                        node.onreadystatechange = null;\n                        resolve({\n                            path: path,\n                            loaded: true,\n                            status: 'Loaded'\n                        });\n                    }\n                };\n            }\n            else {\n                node.onload = function () {\n                    resolve({\n                        path: path,\n                        loaded: true,\n                        status: 'Loaded'\n                    });\n                };\n            }\n            node.onerror = function (error) {\n                return resolve({\n                    path: path,\n                    loaded: false,\n                    status: 'Loaded'\n                });\n            };\n            _this.doc.getElementsByTagName('head')[0].appendChild(node);\n        });\n    };\n    LazyService.prototype.loadStyle = function (path) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.list[path] === true) {\n                resolve({\n                    path: path,\n                    loaded: true,\n                    status: 'Loaded'\n                });\n                return;\n            }\n            _this.list[path] = true;\n            var node = _this.doc.createElement('link');\n            node.rel = 'stylesheet';\n            node.type = 'text/css';\n            node.href = path;\n            _this.doc.getElementsByTagName('head')[0].appendChild(node);\n            resolve({\n                path: path,\n                loaded: true,\n                status: 'Loaded'\n            });\n        });\n    };\n    return LazyService;\n}());\nexport { LazyService };\n//# sourceMappingURL=lazy.service.js.map \n",null]}