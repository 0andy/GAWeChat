{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\charts\\water-wave\\water-wave.component.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\charts\\water-wave\\water-wave.component.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, ViewChild, ElementRef, TemplateRef, Renderer2, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { FromEventObservable } from 'rxjs/observable/FromEventObservable';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nvar WaterWaveComponent = /*@__PURE__*/ (function () {\n    function WaterWaveComponent(el, renderer, cd) {\n        this.el = el;\n        this.renderer = renderer;\n        this.cd = cd;\n        // region: fields\n        this._title = '';\n        this.color = '#1890FF';\n        this._height = 160;\n        this.initFlag = false;\n        // region: resize\n        this.autoHideXLabels = false;\n        this.scroll$ = null;\n    }\n    Object.defineProperty(WaterWaveComponent.prototype, \"title\", {\n        set: function (value) {\n            if (value instanceof TemplateRef)\n                this._titleTpl = value;\n            else\n                this._title = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WaterWaveComponent.prototype, \"height\", {\n        get: function () { return this._height; },\n        set: function (value) {\n            this._height = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WaterWaveComponent.prototype, \"percent\", {\n        get: function () { return this._percent; },\n        set: function (value) {\n            this._percent = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WaterWaveComponent.prototype.renderChart = function () {\n        var data = this.percent / 100;\n        if (!data)\n            return;\n        this.node.nativeElement.innerHTML = '';\n        var self = this;\n        var canvas = this.node.nativeElement;\n        var ctx = canvas.getContext('2d');\n        var canvasWidth = canvas.width;\n        var canvasHeight = canvas.height;\n        var radius = canvasWidth / 2;\n        var lineWidth = 2;\n        var cR = radius - (lineWidth);\n        ctx.beginPath();\n        ctx.lineWidth = lineWidth * 2;\n        var axisLength = canvasWidth - (lineWidth);\n        var unit = axisLength / 8;\n        var range = 0.2; // 振幅\n        var currRange = range;\n        var xOffset = lineWidth;\n        var sp = 0; // 周期偏移量\n        var currData = 0;\n        var waveupsp = 0.005; // 水波上涨速度\n        var arcStack = [];\n        var bR = radius - (lineWidth);\n        var circleOffset = -(Math.PI / 2);\n        var circleLock = true;\n        for (var i = circleOffset; i < circleOffset + (2 * Math.PI); i += 1 / (8 * Math.PI)) {\n            arcStack.push([\n                radius + (bR * Math.cos(i)),\n                radius + (bR * Math.sin(i)),\n            ]);\n        }\n        var cStartPoint = arcStack.shift();\n        ctx.strokeStyle = this.color;\n        ctx.moveTo(cStartPoint[0], cStartPoint[1]);\n        function drawSin() {\n            ctx.beginPath();\n            ctx.save();\n            var sinStack = [];\n            for (var i = xOffset; i <= xOffset + axisLength; i += 20 / axisLength) {\n                var x = sp + ((xOffset + i) / unit);\n                var y = Math.sin(x) * currRange;\n                var dx = i;\n                var dy = ((2 * cR * (1 - currData)) + (radius - cR)) - (unit * y);\n                ctx.lineTo(dx, dy);\n                sinStack.push([dx, dy]);\n            }\n            var startPoint = sinStack.shift();\n            ctx.lineTo(xOffset + axisLength, canvasHeight);\n            ctx.lineTo(xOffset, canvasHeight);\n            ctx.lineTo(startPoint[0], startPoint[1]);\n            var gradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);\n            gradient.addColorStop(0, '#ffffff');\n            gradient.addColorStop(1, '#1890FF');\n            ctx.fillStyle = gradient;\n            ctx.fill();\n            ctx.restore();\n        }\n        function render() {\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n            if (circleLock) {\n                if (arcStack.length) {\n                    var temp = arcStack.shift();\n                    ctx.lineTo(temp[0], temp[1]);\n                    ctx.stroke();\n                }\n                else {\n                    circleLock = false;\n                    ctx.lineTo(cStartPoint[0], cStartPoint[1]);\n                    ctx.stroke();\n                    arcStack = null;\n                    ctx.globalCompositeOperation = 'destination-over';\n                    ctx.beginPath();\n                    ctx.lineWidth = lineWidth;\n                    ctx.arc(radius, radius, bR, 0, 2 * Math.PI, true);\n                    ctx.beginPath();\n                    ctx.save();\n                    ctx.arc(radius, radius, radius - (3 * lineWidth), 0, 2 * Math.PI, true);\n                    ctx.restore();\n                    ctx.clip();\n                    ctx.fillStyle = '#1890FF';\n                }\n            }\n            else {\n                if (data >= 0.85) {\n                    if (currRange > range / 4) {\n                        var t = range * 0.01;\n                        currRange -= t;\n                    }\n                }\n                else if (data <= 0.1) {\n                    if (currRange < range * 1.5) {\n                        var t = range * 0.01;\n                        currRange += t;\n                    }\n                }\n                else {\n                    if (currRange <= range) {\n                        var t = range * 0.01;\n                        currRange += t;\n                    }\n                    if (currRange >= range) {\n                        var t = range * 0.01;\n                        currRange -= t;\n                    }\n                }\n                if ((data - currData) > 0) {\n                    currData += waveupsp;\n                }\n                if ((data - currData) < 0) {\n                    currData -= waveupsp;\n                }\n                sp += 0.07;\n                drawSin();\n            }\n            self.timer = requestAnimationFrame(render);\n        }\n        render();\n    };\n    WaterWaveComponent.prototype.uninstall = function () {\n    };\n    WaterWaveComponent.prototype.updateRadio = function (radio) {\n        this.renderer.setStyle(this.el.nativeElement, 'transform', \"scale(\" + radio + \")\");\n    };\n    WaterWaveComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.initFlag = true;\n        this.updateRadio(1);\n        setTimeout(function () { return _this.resize(); }, 100);\n        this.installResizeEvent();\n    };\n    WaterWaveComponent.prototype.ngOnChanges = function (changes) {\n        if (this.initFlag)\n            this.renderChart();\n    };\n    WaterWaveComponent.prototype.ngOnDestroy = function () {\n        if (this.timer)\n            cancelAnimationFrame(this.timer);\n        this.uninstallResizeEvent();\n        this.uninstall();\n    };\n    WaterWaveComponent.prototype.installResizeEvent = function () {\n        var _this = this;\n        if (this.scroll$)\n            return;\n        this.scroll$ = FromEventObservable.create(window, 'resize')\n            .pipe(debounceTime(500))\n            .subscribe(function () { return _this.resize(); });\n    };\n    WaterWaveComponent.prototype.uninstallResizeEvent = function () {\n        if (this.scroll$)\n            this.scroll$.unsubscribe();\n    };\n    WaterWaveComponent.prototype.resize = function () {\n        var offsetWidth = this.el.nativeElement.parentNode.offsetWidth;\n        this.updateRadio(offsetWidth < this.height ? offsetWidth / this.height : 1);\n        this.renderChart();\n    };\n    return WaterWaveComponent;\n}());\nexport { WaterWaveComponent };\n//# sourceMappingURL=water-wave.component.js.map \n",null]}