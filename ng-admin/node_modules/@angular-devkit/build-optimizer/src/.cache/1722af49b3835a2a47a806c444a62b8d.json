{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\charts\\pie\\pie.component.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\charts\\pie\\pie.component.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, HostBinding, ViewChild, ElementRef, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { FromEventObservable } from 'rxjs/observable/FromEventObservable';\nimport { debounceTime } from 'rxjs/operators';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nvar G2PieComponent = /*@__PURE__*/ (function () {\n    function G2PieComponent(el, cd) {\n        this.el = el;\n        this.cd = cd;\n        this._animate = true;\n        this.color = 'rgba(24, 144, 255, 0.85)';\n        this._height = 0;\n        this._hasLegend = false;\n        this._legendBlock = false;\n        this.inner = 0.75;\n        this.padding = [12, 0, 12, 0];\n        this._tooltip = true;\n        this._lineWidth = 0;\n        this._select = true;\n        this.initFlag = false;\n        this.legendData = [];\n        // region: resize\n        this.scroll$ = null;\n    }\n    Object.defineProperty(G2PieComponent.prototype, \"animate\", {\n        get: \n        // region: fields\n        function () { return this._animate; },\n        set: function (value) {\n            this._animate = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(G2PieComponent.prototype, \"height\", {\n        get: function () { return this._height; },\n        set: function (value) {\n            this._height = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(G2PieComponent.prototype, \"hasLegend\", {\n        get: function () { return this._hasLegend; },\n        set: function (value) {\n            this._hasLegend = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(G2PieComponent.prototype, \"legendBlock\", {\n        get: function () { return this._legendBlock; },\n        set: function (value) {\n            this._legendBlock = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(G2PieComponent.prototype, \"percent\", {\n        get: function () { return this._percent; },\n        set: function (value) {\n            this._percent = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(G2PieComponent.prototype, \"tooltip\", {\n        get: function () { return this._tooltip; },\n        set: function (value) {\n            this._tooltip = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(G2PieComponent.prototype, \"lineWidth\", {\n        get: function () { return this._lineWidth; },\n        set: function (value) {\n            this._lineWidth = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(G2PieComponent.prototype, \"select\", {\n        get: function () { return this._select; },\n        set: function (value) {\n            this._select = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    G2PieComponent.prototype.install = function () {\n        var _this = this;\n        var formatColor;\n        if (typeof this.percent !== 'undefined') {\n            this.select = false;\n            this.tooltip = false;\n            formatColor = function (value) { return value === '占比' ? _this.color || 'rgba(24, 144, 255, 0.85)' : '#F0F2F5'; };\n            /* eslint no-param-reassign: */\n            this.data = [\n                {\n                    x: '占比',\n                    y: +this.percent\n                },\n                {\n                    x: '反比',\n                    y: 100 - +this.percent\n                }\n            ];\n        }\n        if (!this.data || (this.data && this.data.length < 1))\n            return;\n        this.node.nativeElement.innerHTML = '';\n        var chart = new G2.Chart({\n            container: this.node.nativeElement,\n            forceFit: true,\n            height: this.height,\n            padding: this.padding,\n            animate: this.animate\n        });\n        if (!this.tooltip) {\n            chart.tooltip(false);\n        }\n        else {\n            chart.tooltip({\n                showTitle: false,\n                itemTpl: '<li><span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>{name}: {value} %</li>'\n            });\n        }\n        chart.axis(false);\n        chart.legend(false);\n        var dv = new DataSet.DataView();\n        dv.source(this.data).transform({\n            type: 'percent',\n            field: 'y',\n            dimension: 'x',\n            as: 'percent'\n        });\n        chart.source(dv, {\n            x: {\n                type: 'cat',\n                range: [0, 1]\n            },\n            y: {\n                min: 0\n            }\n        });\n        chart.coord('theta', { innerRadius: this.inner });\n        chart\n            .intervalStack()\n            .position('y')\n            .style({ lineWidth: this.lineWidth, stroke: '#fff' })\n            .tooltip('x*percent', function (item, percent) {\n            return {\n                name: item,\n                value: percent\n            };\n        })\n            .color('x', this.percent ? formatColor : this.colors)\n            .select(this.select);\n        chart.render();\n        this.chart = chart;\n        if (this.hasLegend) {\n            this.legendData = chart.getAllGeoms()[0]._attrs.dataArray.map(function (item) {\n                var origin = item[0]._origin;\n                origin.color = item[0].color;\n                origin.checked = true;\n                origin.percent = (origin.percent * 100).toFixed(2);\n                return origin;\n            });\n            this.cd.markForCheck();\n        }\n    };\n    G2PieComponent.prototype.uninstall = function () {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = null;\n        }\n    };\n    G2PieComponent.prototype.handleLegendClick = function (i) {\n        this.legendData[i].checked = !this.legendData[i].checked;\n        if (this.chart) {\n            this.chart.filter('x', function (val, item) { return item.checked; });\n            this.chart.repaint();\n        }\n    };\n    G2PieComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.initFlag = true;\n        setTimeout(function () { return _this.install(); }, 100);\n        this.installResizeEvent();\n    };\n    G2PieComponent.prototype.ngOnChanges = function (changes) {\n        if (this.initFlag)\n            this.install();\n    };\n    G2PieComponent.prototype.ngOnDestroy = function () {\n        this.uninstallResizeEvent();\n        this.uninstall();\n    };\n    G2PieComponent.prototype.installResizeEvent = function () {\n        var _this = this;\n        if (!this.hasLegend)\n            return;\n        this.scroll$ = FromEventObservable.create(window, 'resize')\n            .pipe(debounceTime(200))\n            .subscribe(function () { return _this.resize(); });\n    };\n    G2PieComponent.prototype.uninstallResizeEvent = function () {\n        if (this.scroll$)\n            this.scroll$.unsubscribe();\n    };\n    G2PieComponent.prototype.resize = function () {\n        if (this.el.nativeElement.clientWidth <= 380) {\n            if (!this.legendBlock) {\n                this.legendBlock = true;\n            }\n        }\n        else if (this.legendBlock) {\n            this.legendBlock = false;\n        }\n        if (!this.chart)\n            this.install();\n    };\n    return G2PieComponent;\n}());\nexport { G2PieComponent };\n//# sourceMappingURL=pie.component.js.map \n",null]}