{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\acl\\services\\acl.service.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\acl\\services\\acl.service.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\n/**\n * 访问控制服务\n */\nvar ACLService = /*@__PURE__*/ (function () {\n    function ACLService() {\n        this.roles = [];\n        this.abilities = [];\n        this.full = false;\n    }\n    Object.defineProperty(ACLService.prototype, \"data\", {\n        /** 获取所有数据 */\n        get: /** 获取所有数据 */ function () {\n            return {\n                full: this.full,\n                roles: this.roles,\n                abilities: this.abilities\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ACLService.prototype.parseACLType = function (val) {\n        if (typeof val !== 'string' && !Array.isArray(val)) {\n            return val;\n        }\n        if (Array.isArray(val)) {\n            return { role: val };\n        }\n        return {\n            role: [val]\n        };\n    };\n    /**\n     * 设置当前用户角色或权限能力（会先清除所有）\n     *\n     * @param {ACLType} value\n     */\n    /**\n         * 设置当前用户角色或权限能力（会先清除所有）\n         *\n         * @param {ACLType} value\n         */\n    ACLService.prototype.set = /**\n         * 设置当前用户角色或权限能力（会先清除所有）\n         *\n         * @param {ACLType} value\n         */\n        function (value) {\n            this.abilities = [];\n            this.roles = [];\n            this.add(value);\n        };\n    /**\n     * 标识当前用户为全量，即不受限\n     *\n     * @param {boolean} val\n     */\n    /**\n         * 标识当前用户为全量，即不受限\n         *\n         * @param {boolean} val\n         */\n    ACLService.prototype.setFull = /**\n         * 标识当前用户为全量，即不受限\n         *\n         * @param {boolean} val\n         */\n        function (val) {\n            this.full = val;\n        };\n    /**\n     * 设置当前用户权限能力（会先清除所有）\n     *\n     * @param {((number | string)[])} abilities\n     */\n    /**\n         * 设置当前用户权限能力（会先清除所有）\n         *\n         * @param {((number | string)[])} abilities\n         */\n    ACLService.prototype.setAbility = /**\n         * 设置当前用户权限能力（会先清除所有）\n         *\n         * @param {((number | string)[])} abilities\n         */\n        function (abilities) {\n            this.set({ ability: abilities });\n        };\n    /**\n     * 设置当前用户角色（会先清除所有）\n     *\n     * @param {string[]} roles\n     */\n    /**\n         * 设置当前用户角色（会先清除所有）\n         *\n         * @param {string[]} roles\n         */\n    ACLService.prototype.setRole = /**\n         * 设置当前用户角色（会先清除所有）\n         *\n         * @param {string[]} roles\n         */\n        function (roles) {\n            this.set({ role: roles });\n        };\n    /**\n     * 为当前用户增加角色或权限能力\n     *\n     * @param {ACLType} value\n     */\n    /**\n         * 为当前用户增加角色或权限能力\n         *\n         * @param {ACLType} value\n         */\n    ACLService.prototype.add = /**\n         * 为当前用户增加角色或权限能力\n         *\n         * @param {ACLType} value\n         */\n        function (value) {\n            if (value.role && value.role.length > 0) {\n                (_a = this.roles).push.apply(_a, value.role);\n            }\n            if (value.ability && value.ability.length > 0) {\n                (_b = this.abilities).push.apply(_b, value.ability);\n            }\n            var _a, _b;\n        };\n    /**\n     * 为当前用户附加角色\n     *\n     * @param {string[]} roles\n     */\n    /**\n         * 为当前用户附加角色\n         *\n         * @param {string[]} roles\n         */\n    ACLService.prototype.attachRole = /**\n         * 为当前用户附加角色\n         *\n         * @param {string[]} roles\n         */\n        function (roles) {\n            for (var _i = 0, roles_1 = roles; _i < roles_1.length; _i++) {\n                var val = roles_1[_i];\n                if (!this.roles.includes(val)) {\n                    this.roles.push(val);\n                }\n            }\n        };\n    /**\n     * 为当前用户附加权限\n     *\n     * @param {((number | string)[])} abilities\n     */\n    /**\n         * 为当前用户附加权限\n         *\n         * @param {((number | string)[])} abilities\n         */\n    ACLService.prototype.attachAbility = /**\n         * 为当前用户附加权限\n         *\n         * @param {((number | string)[])} abilities\n         */\n        function (abilities) {\n            for (var _i = 0, abilities_1 = abilities; _i < abilities_1.length; _i++) {\n                var val = abilities_1[_i];\n                if (!this.abilities.includes(val)) {\n                    this.abilities.push(val);\n                }\n            }\n        };\n    /**\n     * 为当前用户移除角色\n     *\n     * @param {string[]} roles\n     */\n    /**\n         * 为当前用户移除角色\n         *\n         * @param {string[]} roles\n         */\n    ACLService.prototype.removeRole = /**\n         * 为当前用户移除角色\n         *\n         * @param {string[]} roles\n         */\n        function (roles) {\n            for (var _i = 0, roles_2 = roles; _i < roles_2.length; _i++) {\n                var val = roles_2[_i];\n                var idx = this.roles.indexOf(val);\n                if (idx !== -1) {\n                    this.roles.splice(idx, 1);\n                }\n            }\n        };\n    /**\n     * 为当前用户移除权限\n     *\n     * @param {((number | string)[])} abilities\n     */\n    /**\n         * 为当前用户移除权限\n         *\n         * @param {((number | string)[])} abilities\n         */\n    ACLService.prototype.removeAbility = /**\n         * 为当前用户移除权限\n         *\n         * @param {((number | string)[])} abilities\n         */\n        function (abilities) {\n            for (var _i = 0, abilities_2 = abilities; _i < abilities_2.length; _i++) {\n                var val = abilities_2[_i];\n                var idx = this.abilities.indexOf(val);\n                if (idx !== -1) {\n                    this.abilities.splice(idx, 1);\n                }\n            }\n        };\n    /**\n     * 当前用户是否有对应角色，其实 `number` 表示Ability\n     *\n     * @param {ACLCanType} roleOrAbility\n     */\n    /**\n         * 当前用户是否有对应角色，其实 `number` 表示Ability\n         *\n         * @param {ACLCanType} roleOrAbility\n         */\n    ACLService.prototype.can = /**\n         * 当前用户是否有对应角色，其实 `number` 表示Ability\n         *\n         * @param {ACLCanType} roleOrAbility\n         */\n        function (roleOrAbility) {\n            if (this.full === true || !roleOrAbility) {\n                return true;\n            }\n            var t = {};\n            if (typeof roleOrAbility === 'number') {\n                t = { ability: [roleOrAbility] };\n            }\n            else if (Array.isArray(roleOrAbility) && roleOrAbility.length > 0 && typeof roleOrAbility[0] === 'number') {\n                t = { ability: roleOrAbility };\n            }\n            else {\n                t = this.parseACLType(roleOrAbility);\n            }\n            if (t.role) {\n                for (var _i = 0, _a = t.role; _i < _a.length; _i++) {\n                    var _r = _a[_i];\n                    if (this.roles.includes(_r)) {\n                        return true;\n                    }\n                }\n            }\n            if (t.ability) {\n                for (var _b = 0, _c = t.ability; _b < _c.length; _b++) {\n                    var _p = _c[_b];\n                    if (this.abilities.includes(_p)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n    /**\n     * 当前用户是否有对应权限点\n     *\n     * @param {(number | string)} ability\n     */\n    /**\n         * 当前用户是否有对应权限点\n         *\n         * @param {(number | string)} ability\n         */\n    ACLService.prototype.canAbility = /**\n         * 当前用户是否有对应权限点\n         *\n         * @param {(number | string)} ability\n         */\n        function (ability) {\n            return this.can({\n                ability: [ability],\n                role: null\n            });\n        };\n    return ACLService;\n}());\nexport { ACLService };\n//# sourceMappingURL=acl.service.js.map \n",null]}