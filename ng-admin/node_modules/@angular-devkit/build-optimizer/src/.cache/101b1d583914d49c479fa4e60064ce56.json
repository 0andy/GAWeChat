{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\auth\\social\\social.service.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\auth\\social\\social.service.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Observable } from 'rxjs/Observable';\nimport { Injectable, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { DA_SERVICE_TOKEN } from '../token/interface';\nvar OPENTYPE = '_delonAuthSocialType';\nvar HREFCALLBACK = '_delonAuthSocialCallbackByHref';\nvar SocialService = /*@__PURE__*/ (function () {\n    function SocialService(tokenService, doc, router) {\n        this.tokenService = tokenService;\n        this.doc = doc;\n        this.router = router;\n    }\n    /**\n     * 跳转至登录页，若为 `type=window` 时，返回值是 `Observable<ITokenModel>`\n     * @param url 获取授权地址\n     * @param callback 当 `type=href` 成功时的回调路由地址\n     * @param options.type 打开方式\n     * @param options.windowFeatures 等同 `window.open` 的 `features` 参数值\n     */\n    /**\n         * 跳转至登录页，若为 `type=window` 时，返回值是 `Observable<ITokenModel>`\n         * @param url 获取授权地址\n         * @param callback 当 `type=href` 成功时的回调路由地址\n         * @param options.type 打开方式\n         * @param options.windowFeatures 等同 `window.open` 的 `features` 参数值\n         */\n    SocialService.prototype.login = /**\n         * 跳转至登录页，若为 `type=window` 时，返回值是 `Observable<ITokenModel>`\n         * @param url 获取授权地址\n         * @param callback 当 `type=href` 成功时的回调路由地址\n         * @param options.type 打开方式\n         * @param options.windowFeatures 等同 `window.open` 的 `features` 参数值\n         */\n        function (url, callback, options) {\n            var _this = this;\n            if (options === void 0) {\n                options = {};\n            }\n            options = Object.assign({\n                type: 'href',\n                windowFeatures: 'location=yes,height=570,width=520,scrollbars=yes,status=yes'\n            }, options);\n            localStorage.setItem(OPENTYPE, options.type);\n            localStorage.setItem(HREFCALLBACK, callback || '/');\n            if (options.type === 'href') {\n                this.doc.location.href = url;\n            }\n            else {\n                this._win = window.open(url, '_blank', options.windowFeatures);\n                this._win$ = setInterval(function () {\n                    if (_this._win && _this._win.closed) {\n                        _this.ngOnDestroy();\n                        var model = _this.tokenService.get();\n                        if (model && !model.token)\n                            model = null;\n                        if (model) {\n                            _this.tokenService.set(model);\n                        }\n                        if (_this.observer) {\n                            _this.observer.next(model);\n                            _this.observer.complete();\n                        }\n                    }\n                }, 100);\n            }\n            if (options.type === 'window') {\n                return Observable.create(function (observer) {\n                    _this.observer = observer;\n                });\n            }\n            else {\n                return;\n            }\n        };\n    /**\n     * 授权成功后的回调处理\n     * @param rawData 指定回调认证信息，为空时从根据当前URL解析\n     */\n    /**\n         * 授权成功后的回调处理\n         * @param rawData 指定回调认证信息，为空时从根据当前URL解析\n         */\n    SocialService.prototype.callback = /**\n         * 授权成功后的回调处理\n         * @param rawData 指定回调认证信息，为空时从根据当前URL解析\n         */\n        function (rawData, allowRedirect) {\n            if (allowRedirect === void 0) {\n                allowRedirect = true;\n            }\n            // from uri\n            if (!rawData && this.router.url.indexOf('?') === -1) {\n                throw new Error(\"url muse contain a ?\");\n            }\n            // parse\n            var data = { token: \"\" };\n            if (typeof rawData === 'string') {\n                var rightUrl = rawData.split('?')[1].split('#')[0];\n                data = this.router.parseUrl(~rightUrl.indexOf('?') ? rightUrl : './?' + rightUrl).queryParams || {};\n            }\n            else {\n                data = rawData;\n            }\n            if (!data || !data.token)\n                throw new Error(\"invalide token data\");\n            this.tokenService.set(data);\n            // redirect\n            if (allowRedirect === true) {\n                var url = localStorage.getItem(HREFCALLBACK) || '/';\n                localStorage.removeItem(HREFCALLBACK);\n                var type = localStorage.getItem(OPENTYPE);\n                localStorage.removeItem(OPENTYPE);\n                if (type === 'window') {\n                    window.close();\n                }\n                else {\n                    this.router.navigateByUrl(url);\n                }\n            }\n            return data;\n        };\n    SocialService.prototype.ngOnDestroy = function () {\n        if (this._win$) {\n            clearInterval(this._win$);\n            this._win$ = null;\n        }\n    };\n    return SocialService;\n}());\nexport { SocialService };\n//# sourceMappingURL=social.service.js.map \n",null]}