{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\charts\\gauge\\gauge.component.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\charts\\gauge\\gauge.component.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nvar GaugeComponent = /*@__PURE__*/ (function () {\n    function GaugeComponent(cd) {\n        this.cd = cd;\n        this.color = '#2F9CFF';\n        this.bgColor = '#F0F2F5';\n        this.initFlag = false;\n    }\n    Object.defineProperty(GaugeComponent.prototype, \"height\", {\n        get: function () { return this._height; },\n        set: function (value) {\n            this._height = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GaugeComponent.prototype, \"percent\", {\n        get: function () { return this._percent; },\n        set: function (value) {\n            this._percent = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GaugeComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.initFlag = true;\n        setTimeout(function () { return _this.install(); }, 100);\n    };\n    GaugeComponent.prototype.createData = function () {\n        return [{ name: this.title, value: +this.percent }];\n    };\n    GaugeComponent.prototype.draw = function () {\n        if (!this.chart)\n            return;\n        this.chart.guide().clear();\n        var data = this.createData();\n        // 绘制仪表盘背景\n        this.chart.guide().arc({\n            zIndex: 0,\n            top: false,\n            start: [0, 0.95],\n            end: [100, 0.95],\n            style: {\n                // 底灰色\n                stroke: this.bgColor,\n                lineWidth: 12\n            }\n        });\n        // 绘制指标\n        this.chart.guide().arc({\n            zIndex: 1,\n            start: [0, 0.95],\n            end: [data[0].value, 0.95],\n            style: {\n                stroke: this.color,\n                lineWidth: 12,\n            }\n        });\n        this.chart.changeData(data);\n    };\n    GaugeComponent.prototype.install = function () {\n        this.node.nativeElement.innerHTML = '';\n        var Shape = G2.Shape;\n        // 自定义Shape 部分\n        Shape.registerShape('point', 'pointer', {\n            drawShape: function (cfg, group) {\n                var point = cfg.points[0]; // 获取第一个标记点\n                point = this.parsePoint(point);\n                var center = this.parsePoint({\n                    // 获取极坐标系下画布中心点\n                    x: 0,\n                    y: 0\n                });\n                // 绘制指针\n                group.addShape('line', {\n                    attrs: {\n                        x1: center.x,\n                        y1: center.y,\n                        x2: point.x,\n                        y2: point.y,\n                        stroke: cfg.color,\n                        lineWidth: 2,\n                        lineCap: 'round'\n                    }\n                });\n                var origin = cfg.origin;\n                group.addShape('text', {\n                    attrs: {\n                        x: center.x,\n                        y: center.y + 80,\n                        text: origin._origin.value + \"%\",\n                        textAlign: 'center',\n                        fontSize: 24,\n                        fill: 'rgba(0, 0, 0, 0.85)'\n                    }\n                });\n                return group.addShape('circle', {\n                    attrs: {\n                        x: center.x,\n                        y: center.y,\n                        r: 9.75,\n                        stroke: cfg.color,\n                        lineWidth: 2,\n                        fill: '#fff'\n                    }\n                });\n            }\n        });\n        var data = this.createData();\n        var chart = new G2.Chart({\n            container: this.node.nativeElement,\n            forceFit: true,\n            height: this.height,\n            padding: [10, 10, 30, 10]\n        });\n        chart.source(data);\n        chart.coord('polar', {\n            startAngle: -1.2 * Math.PI,\n            endAngle: 0.2 * Math.PI\n        });\n        chart.scale('value', {\n            min: 0,\n            max: 100,\n            nice: true,\n            tickCount: 6\n        });\n        chart.axis('1', false);\n        // 刻度值\n        chart.axis('value', {\n            zIndex: 2,\n            line: null,\n            label: {\n                offset: -12,\n                formatter: this.format\n            },\n            tickLine: null,\n            grid: null\n        });\n        chart.legend(false);\n        chart.point({\n            generatePoints: true\n        }).position('value*1')\n            .shape('pointer')\n            .color(this.color)\n            .active(false);\n        this.chart = chart;\n        this.draw();\n    };\n    GaugeComponent.prototype.uninstall = function () {\n        if (this.chart)\n            this.chart.destroy();\n    };\n    GaugeComponent.prototype.ngOnChanges = function (changes) {\n        if (this.initFlag)\n            this.draw();\n    };\n    GaugeComponent.prototype.ngOnDestroy = function () {\n        this.uninstall();\n    };\n    return GaugeComponent;\n}());\nexport { GaugeComponent };\n//# sourceMappingURL=gauge.component.js.map \n",null]}