{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\zip\\zip.service.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\abc\\zip\\zip.service.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, Inject } from '@angular/core';\nimport { saveAs } from 'file-saver';\nimport { _HttpClient } from '@delon/theme';\nimport { LazyService } from '../utils/lazy.service';\nimport { DA_ZIP_CONFIG } from './interface';\nvar ZipService = /*@__PURE__*/ (function () {\n    function ZipService(config, _http, lazy) {\n        this.config = config;\n        this._http = _http;\n        this.lazy = lazy;\n    }\n    ZipService.prototype.init = function () {\n        var config = Object.assign({\n            url: \"//cdn.bootcss.com/jszip/3.1.5/jszip.min.js\",\n            utils: []\n        }, this.config);\n        return this.lazy.load([config.url].concat(config.utils));\n    };\n    ZipService.prototype.check = function (zip) {\n        if (!zip)\n            throw new Error('get instance via `ZipService.create()`');\n    };\n    /** 解压 */\n    /** 解压 */\n    ZipService.prototype.read = /** 解压 */\n        function (fileOrUrl, options) {\n            var _this = this;\n            return new Promise(function (resolve) {\n                _this.init().then(function () {\n                    // from url\n                    if (typeof fileOrUrl === 'string') {\n                        _this._http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe(function (res) {\n                            JSZip.loadAsync(res, options).then(function (ret) { return resolve(ret); });\n                        });\n                        return;\n                    }\n                    // from file\n                    var reader = new FileReader();\n                    reader.onload = function (e) {\n                        JSZip.loadAsync(e.target.result, options).then(function (ret) { return resolve(ret); });\n                    };\n                    reader.readAsBinaryString(fileOrUrl);\n                });\n            });\n        };\n    /** 创建 Zip 实例，用于创建压缩文件 */\n    /** 创建 Zip 实例，用于创建压缩文件 */\n    ZipService.prototype.create = /** 创建 Zip 实例，用于创建压缩文件 */\n        function () {\n            var _this = this;\n            return new Promise(function (resolve) {\n                _this.init().then(function () {\n                    var zipFile = new JSZip();\n                    resolve(zipFile);\n                });\n            });\n        };\n    /**\n     * 下载URL资源并写入 zip\n     * @param zip Zip 实例\n     * @param path Zip 路径，例如： `text.txt`、`txt/hi.txt`\n     * @param url URL 地址\n     */\n    /**\n         * 下载URL资源并写入 zip\n         * @param zip Zip 实例\n         * @param path Zip 路径，例如： `text.txt`、`txt/hi.txt`\n         * @param url URL 地址\n         */\n    ZipService.prototype.pushUrl = /**\n         * 下载URL资源并写入 zip\n         * @param zip Zip 实例\n         * @param path Zip 路径，例如： `text.txt`、`txt/hi.txt`\n         * @param url URL 地址\n         */\n        function (zip, path, url) {\n            var _this = this;\n            this.check(zip);\n            return new Promise(function (resolve, reject) {\n                _this._http.request('GET', url, { responseType: 'arraybuffer' }).subscribe(function (res) {\n                    zip.file(path, res);\n                    resolve();\n                }, function () {\n                    reject();\n                });\n            });\n        };\n    /** 保存Zip */\n    /** 保存Zip */\n    ZipService.prototype.save = /** 保存Zip */\n        function (zip, options) {\n            this.check(zip);\n            var opt = Object.assign({}, options);\n            return new Promise(function (resolve) {\n                zip.generateAsync(Object.assign({ type: 'blob' }, opt.options), opt.update).then(function (data) {\n                    if (opt.callback)\n                        opt.callback();\n                    saveAs(data, opt.filename || 'download.zip');\n                });\n            });\n        };\n    return ZipService;\n}());\nexport { ZipService };\n//# sourceMappingURL=zip.service.js.map \n",null]}