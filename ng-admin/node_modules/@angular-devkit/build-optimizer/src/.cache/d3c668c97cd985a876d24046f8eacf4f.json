{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\auth\\token\\jwt\\jwt.interceptor.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\auth\\token\\jwt\\jwt.interceptor.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs/observable/of';\nimport { DA_SERVICE_TOKEN } from '../interface';\nimport { JWTTokenModel } from './jwt.model';\nimport { DA_OPTIONS_TOKEN } from '../../auth.options';\nvar JWTInterceptor = /*@__PURE__*/ (function () {\n    function JWTInterceptor(injector) {\n        this.injector = injector;\n    }\n    JWTInterceptor.prototype.intercept = function (req, next) {\n        var options = this.injector.get(DA_OPTIONS_TOKEN);\n        if (options.ignores) {\n            for (var _i = 0, _a = options.ignores; _i < _a.length; _i++) {\n                var item = _a[_i];\n                if (item.test(req.url))\n                    return next.handle(req);\n            }\n        }\n        if (options.allow_anonymous_key && req.params.has(options.allow_anonymous_key)) {\n            return next.handle(req);\n        }\n        var model = this.injector.get(DA_SERVICE_TOKEN).get(JWTTokenModel);\n        if (model && model.token && !model.isExpired(options.token_exp_offset || 0)) {\n            req = req.clone({\n                setHeaders: {\n                    Authorization: \"Bearer \" + model.token\n                }\n            });\n        }\n        else {\n            if (options.token_invalid_redirect === true) {\n                var router = this.injector.get(Router);\n                this.injector.get(Router).navigate([options.login_url]);\n                return of({ status: 401, _from: 'jwt_intercept' });\n            }\n        }\n        return next.handle(req);\n    };\n    return JWTInterceptor;\n}());\nexport { JWTInterceptor };\n//# sourceMappingURL=jwt.interceptor.js.map \n",null]}