{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\ngx-tinymce\\src\\tinymce.component.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\ngx-tinymce\\src\\tinymce.component.js","mtime":1514030187000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, forwardRef, Input, ChangeDetectionStrategy, ChangeDetectorRef, TemplateRef, Optional } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Router, ActivationEnd } from '@angular/router';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ScriptService } from './script.service';\nimport { TinymceOptions } from './tinymce.options';\nvar TinymceComponent = /*@__PURE__*/ (function () {\n    function TinymceComponent(defConfig, ss, router, cd) {\n        this.defConfig = defConfig;\n        this.ss = ss;\n        this.router = router;\n        this.cd = cd;\n        this.inited = false;\n        this.load = true;\n        this.id = \"_tinymce-\" + Math.random().toString(36).substring(2);\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    Object.defineProperty(TinymceComponent.prototype, \"loading\", {\n        set: function (value) {\n            if (value instanceof TemplateRef)\n                this._loadingTpl = value;\n            else\n                this._loading = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TinymceComponent.prototype.init = function () {\n        var _this = this;\n        if (!window.tinymce)\n            throw new Error('tinymce js文件加载失败');\n        if (this.instance)\n            return;\n        if (this.defConfig.baseURL)\n            tinymce.baseURL = this.defConfig.baseURL;\n        var userOptions = Object.assign({}, this.defConfig.config, this.config);\n        var options = Object.assign({\n            selector: \"#\" + this.id\n        }, this.defConfig.config, this.config, {\n            setup: function (editor) {\n                _this.instance = editor;\n                editor.on('change keyup', function () {\n                    _this.value = editor.getContent();\n                    _this.onChange(_this.value);\n                    _this.onTouched(_this.value);\n                });\n                if (typeof userOptions.setup === 'function') {\n                    userOptions.setup(editor);\n                }\n            },\n            init_instance_callback: function (editor) {\n                if (editor && _this.value)\n                    editor.setContent(_this.value);\n                if (typeof userOptions.init_instance_callback === 'function') {\n                    userOptions.init_instance_callback(editor);\n                }\n                _this.load = false;\n                _this.cd.markForCheck();\n            }\n        });\n        if (userOptions.auto_focus)\n            options.auto_focus = this.id;\n        tinymce.init(options);\n    };\n    TinymceComponent.prototype.destroy = function () {\n        if (!this.instance) {\n            return;\n        }\n        this.instance.off();\n        this.instance.remove('#' + this.id);\n        this.instance = null;\n    };\n    TinymceComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.inited = true;\n        this.route$ = this.router.events.pipe(filter(function (e) { return e instanceof ActivationEnd; }), debounceTime(100), filter(function (e) { return !!document.querySelector('#' + _this.id); })).subscribe(function (res) {\n            _this.destroy();\n            _this.init();\n        });\n    };\n    TinymceComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        // 已经存在对象无须进入懒加载模式\n        if (window.tinymce) {\n            this.init();\n            return;\n        }\n        var baseURL = this.defConfig && this.defConfig.baseURL;\n        var fileName = this.defConfig && this.defConfig.fileName;\n        this.ss.load((baseURL || './assets/tinymce/') + (fileName || 'tinymce.min.js')).getChangeEmitter().subscribe(function (res) {\n            _this.init();\n        });\n    };\n    TinymceComponent.prototype.ngOnChanges = function (changes) {\n        if (this.inited && changes.config) {\n            this.destroy();\n            this.init();\n        }\n    };\n    TinymceComponent.prototype.ngOnDestroy = function () {\n        this.destroy();\n        if (this.route$)\n            this.route$.unsubscribe();\n    };\n    TinymceComponent.prototype.writeValue = function (value) {\n        this.value = value;\n        if (this.instance) {\n            this.instance.setContent(this.value);\n        }\n    };\n    TinymceComponent.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    TinymceComponent.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    TinymceComponent.prototype.setDisabledState = function (isDisabled) {\n        if (!this.instance)\n            return;\n        if (isDisabled) {\n            this.instance.disabled();\n        }\n        else {\n            this.instance.setEnabled();\n        }\n    };\n    return TinymceComponent;\n}());\nexport { TinymceComponent };\n//# sourceMappingURL=tinymce.component.js.map \n",null]}