{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\mock\\src\\mock.interceptor.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@delon\\mock\\src\\mock.interceptor.js","mtime":1515671330000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, Injector } from '@angular/core';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { delay } from 'rxjs/operators';\nimport { DM_OPTIONS_TOKEN } from '../mock.options';\nimport { MockService } from './mock.service';\nimport { MockStatusError } from './status.error';\nvar MockInterceptor = /*@__PURE__*/ (function () {\n    function MockInterceptor(injector) {\n        this.injector = injector;\n    }\n    MockInterceptor.prototype.intercept = function (req, next) {\n        var src = this.injector.get(MockService);\n        var config = this.injector.get(DM_OPTIONS_TOKEN);\n        var rule = src.getRule(req.method, req.url);\n        if (!rule && !config.force) {\n            if (config.log)\n                console.log('non-mock', req.url, req);\n            return next.handle(req);\n        }\n        var res;\n        switch (typeof rule.callback) {\n            case 'function':\n                var mockRequest_1 = {\n                    original: req,\n                    body: req.body,\n                    queryString: {},\n                    headers: {},\n                    params: rule.params\n                };\n                req.params.keys().forEach(function (key) { return mockRequest_1.queryString[key] = req.params.get(key); });\n                req.headers.keys().forEach(function (key) { return mockRequest_1.headers[key] = req.headers.get(key); });\n                try {\n                    res = rule.callback.call(this, mockRequest_1);\n                }\n                catch (e) {\n                    if (e instanceof MockStatusError) {\n                        var errRes_1 = new HttpErrorResponse({\n                            url: req.url,\n                            headers: req.headers,\n                            status: e.status,\n                            statusText: e.statusText || 'Unknown Error',\n                            error: e.error\n                        });\n                        if (config.log)\n                            console.log('error mock', req.url, errRes_1, req);\n                        // TODO: TypeError: You provided an invalid object where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.\n                        return new Observable(function (observer) {\n                            observer.error(errRes_1);\n                        });\n                    }\n                }\n                break;\n            default:\n                res = rule.callback;\n                break;\n        }\n        var response = new HttpResponse({\n            status: 200,\n            body: res,\n            url: req.url\n        });\n        if (config.log)\n            console.log('mock', req.url, response, req);\n        return of(response).pipe(delay(config.delay));\n    };\n    return MockInterceptor;\n}());\nexport { MockInterceptor };\n//# sourceMappingURL=mock.interceptor.js.map \n",null]}