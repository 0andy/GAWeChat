{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\ngx-countdown\\components\\timer.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\ngx-countdown\\components\\timer.js","mtime":1514454377000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nvar Timer = /*@__PURE__*/ (function () {\n    function Timer() {\n        this.fns = [];\n        this.commands = [];\n        this.ing = false;\n    }\n    Timer.prototype.start = function () {\n        if (this.ing === true)\n            return;\n        this.ing = true;\n        this.nextTime = +new Date();\n        this.process();\n    };\n    Timer.prototype.process = function () {\n        var _this = this;\n        while (this.commands.length) {\n            this.commands.shift()();\n        }\n        var diff = +new Date() - this.nextTime;\n        var count = 1 + Math.floor(diff / 100);\n        diff = 100 - diff % 100;\n        this.nextTime += 100 * count;\n        var frequency, step, i, len;\n        for (i = 0, len = this.fns.length; i < len; i += 2) {\n            frequency = this.fns[i + 1];\n            // 100/s\n            if (0 === frequency) {\n                this.fns[i](count);\n                // 1000/s\n            }\n            else {\n                // 先把末位至0，再每次加2\n                frequency += 2 * count - 1;\n                step = Math.floor(frequency / 20);\n                if (step > 0) {\n                    this.fns[i](step);\n                }\n                // 把末位还原成1\n                this.fns[i + 1] = frequency % 20 + 1;\n            }\n        }\n        if (this.ing)\n            setTimeout(function () { _this.process(); }, diff);\n    };\n    Timer.prototype.add = function (fn, frequency) {\n        var _this = this;\n        this.commands.push(function () {\n            _this.fns.push(fn);\n            _this.fns.push(frequency === 1000 ? 1 : 0);\n            _this.ing = _this.fns.length > 0;\n        });\n    };\n    Timer.prototype.remove = function (fn) {\n        var _this = this;\n        this.commands.push(function () {\n            var i = _this.fns.indexOf(fn);\n            if (i !== -1) {\n                _this.fns.splice(i, 2);\n            }\n            _this.ing = _this.fns.length > 0;\n        });\n    };\n    return Timer;\n}());\nexport { Timer };\n//# sourceMappingURL=timer.js.map \n",null]}