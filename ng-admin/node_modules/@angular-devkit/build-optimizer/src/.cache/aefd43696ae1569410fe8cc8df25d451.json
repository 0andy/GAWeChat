{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\ng-clipboard-antd\\bundles\\ng-clipboard-antd.umd.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\ng-clipboard-antd\\bundles\\ng-clipboard-antd.umd.js","mtime":1513751517000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('ng-zorro-antd')) :\n        typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'ng-zorro-antd'], factory) :\n            (factory((global['ng-clipboard-antd'] = {}), global.ng.core, global.ng.common, global.ngZorro.antd));\n}(this, (function (exports, core, common, ngZorroAntd) {\n    'use strict';\n    // tslint:disable:no-inferrable-types\n    var NzClipboardConfig = /*@__PURE__*/ (function () {\n        function NzClipboardConfig() {\n            /**\n                 * 成功时显示文本（默认：复制成功）\n                 * @type {string}\n                 */\n            this.success = '复制成功';\n            /**\n                 * 错误时显示文本（默认：复制失败）\n                 * @type {string}\n                 */\n            this.error = '复制失败';\n        }\n        return NzClipboardConfig;\n    }());\n    /**\n     * The core function is ported from clipboard.js & ngx-clipboard\n     * clipboard.js: https://github.com/zenorocha/clipboard.js\n     * ngx-clipboard: https://github.com/maxisam/ngx-clipboard\n     */\n    var NzClipboardService = /*@__PURE__*/ (function () {\n        function NzClipboardService(document, cog, messageSrv) {\n            this.document = document;\n            this.messageSrv = messageSrv;\n            this.config = Object.assign(new NzClipboardConfig(), cog);\n        }\n        Object.defineProperty(NzClipboardService.prototype, \"isSupported\", {\n            get: function () {\n                return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NzClipboardService.prototype.isTargetValid = function (element) {\n            if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n                if (element.hasAttribute('disabled')) {\n                    // tslint:disable-next-line:max-line-length\n                    throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                }\n                return true;\n            }\n            throw new Error('Target should be input or textarea');\n        };\n        /**\n         * copyFromInputElement\n         */\n        /**\n             * copyFromInputElement\n             */\n        NzClipboardService.prototype.copyFromInputElement = /**\n             * copyFromInputElement\n             */\n            function (targetElm, success, error) {\n                try {\n                    this.selectTarget(targetElm);\n                    var re = this.copyText();\n                    this.clearSelection(targetElm);\n                    this.handleMessage(true, success);\n                    return re;\n                }\n                catch (error) {\n                    console.warn('copy error', error);\n                    this.handleMessage(false, error);\n                    return false;\n                }\n            };\n        /**\n         * Creates a fake textarea element, sets its value from `text` property,\n         * and makes a selection on it.\n         */\n        /**\n             * Creates a fake textarea element, sets its value from `text` property,\n             * and makes a selection on it.\n             */\n        NzClipboardService.prototype.copyFromContent = /**\n             * Creates a fake textarea element, sets its value from `text` property,\n             * and makes a selection on it.\n             */\n            function (content, success, error) {\n                if (!this.tempTextArea) {\n                    this.tempTextArea = this.createTempTextArea(this.document);\n                    this.document.body.appendChild(this.tempTextArea);\n                }\n                this.tempTextArea.value = content;\n                return this.copyFromInputElement(this.tempTextArea, success, error);\n            };\n        // remove temporary textarea if any\n        // remove temporary textarea if any\n        NzClipboardService.prototype.destroy =\n            // remove temporary textarea if any\n            function () {\n                if (this.tempTextArea) {\n                    this.document.body.removeChild(this.tempTextArea);\n                    this.tempTextArea = undefined;\n                }\n            };\n        // select the target html input element\n        // select the target html input element\n        NzClipboardService.prototype.selectTarget =\n            // select the target html input element\n            function (inputElement) {\n                if (inputElement.select)\n                    inputElement.select();\n                if (inputElement.setSelectionRange)\n                    inputElement.setSelectionRange(0, inputElement.value.length);\n                return inputElement.value.length;\n            };\n        NzClipboardService.prototype.copyText = function () {\n            return this.document.execCommand('copy');\n        };\n        // Removes current selection and focus from `target` element.\n        // Removes current selection and focus from `target` element.\n        NzClipboardService.prototype.clearSelection =\n            // Removes current selection and focus from `target` element.\n            function (inputElement) {\n                // tslint:disable-next-line:no-unused-expression\n                inputElement && inputElement.blur();\n                window.getSelection().removeAllRanges();\n            };\n        // create a fake textarea for copy command\n        // create a fake textarea for copy command\n        NzClipboardService.prototype.createTempTextArea =\n            // create a fake textarea for copy command\n            function (doc) {\n                var isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n                var ta;\n                ta = doc.createElement('textarea');\n                // Prevent zooming on iOS\n                ta.style.fontSize = '12pt';\n                // Reset box model\n                ta.style.border = '0';\n                ta.style.padding = '0';\n                ta.style.margin = '0';\n                // Move element out of screen horizontally\n                ta.style.position = 'absolute';\n                ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n                // Move element to the same position vertically\n                var yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n                ta.style.top = yPosition + 'px';\n                ta.setAttribute('readonly', '');\n                return ta;\n            };\n        NzClipboardService.prototype.handleMessage = function (status, focus) {\n            if (typeof focus === 'undefined') {\n                focus = status ? this.config.success : this.config.error;\n            }\n            if (status) {\n                if (focus)\n                    this.messageSrv.success(focus);\n            }\n            else {\n                if (focus)\n                    this.messageSrv.error(focus);\n            }\n        };\n        NzClipboardService.decorators = [\n            { type: core.Injectable },\n        ];\n        /** @nocollapse */\n        NzClipboardService.ctorParameters = function () {\n            return [\n                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },\n                { type: NzClipboardConfig, },\n                { type: ngZorroAntd.NzMessageService, },\n            ];\n        };\n        return NzClipboardService;\n    }());\n    var NzClipboardDirective = /*@__PURE__*/ (function () {\n        function NzClipboardDirective(clipboardSrv) {\n            this.clipboardSrv = clipboardSrv;\n            this.success = new core.EventEmitter();\n            this.error = new core.EventEmitter();\n        }\n        NzClipboardDirective.prototype._click = function () {\n            if (!this.clipboardSrv.isSupported) {\n                this.handleResult(false, undefined);\n            }\n            else if (this.target) {\n                var newTarget = null;\n                if (!(this.target instanceof HTMLInputElement)) {\n                    newTarget = this.target._el.querySelector('input,textarea');\n                }\n                else {\n                    newTarget = this.target;\n                }\n                this.clipboardSrv.isTargetValid(newTarget);\n                this.handleResult(this.clipboardSrv.copyFromInputElement(newTarget, this.successText, this.errorText), newTarget.value);\n            }\n            else if (this.content) {\n                this.handleResult(this.clipboardSrv.copyFromContent(this.content, this.successText, this.errorText), this.content);\n            }\n        };\n        NzClipboardDirective.prototype.handleResult = function (succeeded, copiedContent) {\n            if (succeeded) {\n                this.success.emit({ status: true, content: copiedContent });\n            }\n            else {\n                this.error.emit({ status: false });\n            }\n        };\n        NzClipboardDirective.prototype.ngOnDestroy = function () {\n            this.clipboardSrv.destroy();\n        };\n        NzClipboardDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[nz-clipboard]'\n                    },] },\n        ];\n        /** @nocollapse */\n        NzClipboardDirective.ctorParameters = function () {\n            return [\n                { type: NzClipboardService, },\n            ];\n        };\n        NzClipboardDirective.propDecorators = {\n            \"content\": [{ type: core.Input, args: ['nz-clipboard',] },],\n            \"target\": [{ type: core.Input, args: ['nzTarget',] },],\n            \"successText\": [{ type: core.Input, args: ['nzSuccessText',] },],\n            \"errorText\": [{ type: core.Input, args: ['nzErrorText',] },],\n            \"success\": [{ type: core.Output, args: ['nzSuccess',] },],\n            \"error\": [{ type: core.Output, args: ['nzError',] },],\n            \"_click\": [{ type: core.HostListener, args: ['click', ['$event.target'],] },],\n        };\n        return NzClipboardDirective;\n    }());\n    // endregion\n    var NzClipboardModule = /*@__PURE__*/ (function () {\n        function NzClipboardModule() {\n        }\n        NzClipboardModule.forRoot = function (config) {\n            return {\n                ngModule: NzClipboardModule,\n                providers: [\n                    NzClipboardService,\n                    ngZorroAntd.NzMessageService,\n                    { provide: NzClipboardConfig, useValue: config }\n                ]\n            };\n        };\n        NzClipboardModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule, ngZorroAntd.NzMessageModule],\n                        declarations: [NzClipboardDirective],\n                        exports: [NzClipboardDirective]\n                    },] },\n        ];\n        /** @nocollapse */\n        NzClipboardModule.ctorParameters = function () { return []; };\n        return NzClipboardModule;\n    }());\n    exports.NzClipboardModule = NzClipboardModule;\n    exports.NzClipboardConfig = NzClipboardConfig;\n    exports.NzClipboardDirective = NzClipboardDirective;\n    exports.NzClipboardService = NzClipboardService;\n    Object.defineProperty(exports, '__esModule', { value: true });\n})));\n",null]}