{"remainingRequest":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\ngx-countdown\\components\\component.js","dependencies":[{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\ngx-countdown\\components\\component.js","mtime":1514454377000},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\mygit\\HCWeChat\\ng-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ElementRef, ViewEncapsulation, Input, Renderer, Output, EventEmitter, HostBinding } from '@angular/core';\nimport { Timer } from './timer';\nvar CountdownComponent = /*@__PURE__*/ (function () {\n    function CountdownComponent(el, renderer, timer) {\n        this.el = el;\n        this.renderer = renderer;\n        this.timer = timer;\n        this.frequency = 1000;\n        this._notify = {};\n        this.hands = [];\n        this.left = 0;\n        this.parsed = false;\n        this.stoped = false;\n        this.start = new EventEmitter();\n        this.finished = new EventEmitter();\n        this.notify = new EventEmitter();\n        this.event = new EventEmitter();\n        this.timer.start();\n    }\n    CountdownComponent.prototype.ngOnInit = function () {\n        this.mergeConfig();\n        this.init();\n        if (!this.config.demand)\n            this.begin();\n    };\n    CountdownComponent.prototype.ngOnDestroy = function () {\n        this.destroy();\n    };\n    CountdownComponent.prototype.ngOnChanges = function (changes) {\n        if (!changes.config.firstChange) {\n            this.mergeConfig();\n            this.destroy().init();\n        }\n    };\n    CountdownComponent.prototype.begin = function () {\n        this.parsed = false;\n        this.callEvent('start');\n    };\n    CountdownComponent.prototype.restart = function () {\n        if (!this.stoped)\n            this.destroy();\n        this.init();\n        this.timer.start();\n        this.callEvent('restart');\n    };\n    CountdownComponent.prototype.stop = function () {\n        if (this.stoped)\n            return;\n        this.stoped = true;\n        this.destroy();\n        this.callEvent('stop');\n    };\n    CountdownComponent.prototype.pause = function () {\n        if (this.stoped || this.parsed)\n            return;\n        this.parsed = true;\n        this.callEvent('pause');\n    };\n    CountdownComponent.prototype.resume = function () {\n        if (this.stoped || !this.parsed)\n            return;\n        this.parsed = false;\n        this.callEvent('resume');\n    };\n    CountdownComponent.prototype.mergeConfig = function () {\n        this.config = Object.assign({\n            demand: false,\n            leftTime: 0,\n            template: '$!h!时$!m!分$!s!秒',\n            size: 'lite',\n            effect: 'normal',\n            varRegular: /\\$\\!([\\-\\w]+)\\!/g,\n            clock: ['d', 100, 2, 'h', 24, 2, 'm', 60, 2, 's', 60, 2, 'u', 10, 1]\n        }, this.config);\n    };\n    CountdownComponent.prototype.callEvent = function (action) {\n        this.event.emit({ action: action, left: this.left });\n    };\n    CountdownComponent.prototype.init = function () {\n        var me = this;\n        var el = me.el.nativeElement;\n        me.parsed = me.config.demand;\n        me.stoped = false;\n        this.cls = \"count-down \" + me.config.size + \" \" + (me.config.className || '');\n        // 分析markup\n        var tmpl = el.innerHTML || me.config.template;\n        me.config.varRegular.lastIndex = 0;\n        el.innerHTML = tmpl.replace(me.config.varRegular, function (str, type) {\n            // 时钟频率校正.\n            if (type === 'u' || type === 's-ext')\n                me.frequency = 100;\n            // 生成hand的markup\n            var content = '';\n            if (type === 's-ext') {\n                me.hands.push({ type: 's' });\n                me.hands.push({ type: 'u' });\n                content = me.html('', 's', 'handlet') +\n                    me.html('.', '', 'digital') +\n                    me.html('', 'u', 'handlet');\n            }\n            else {\n                me.hands.push({ type: type });\n            }\n            return me.html(content, type, 'hand');\n        });\n        var clock = me.config.clock;\n        me.hands.forEach(function (hand) {\n            var type = hand.type;\n            var base = 100, i;\n            hand.node = el.querySelector(\".hand-\" + type);\n            // radix, bits 初始化\n            for (i = clock.length - 3; i > -1; i -= 3) {\n                if (type === clock[i]) {\n                    break;\n                }\n                base *= clock[i + 1];\n            }\n            hand.base = base;\n            hand.radix = clock[i + 1];\n            hand.bits = clock[i + 2];\n        });\n        me.getLeft();\n        me.reflow(0, true);\n        // bind reflow to me\n        var _reflow = me.reflow;\n        me.reflow = function (count) {\n            if (count === void 0) {\n                count = 0;\n            }\n            return _reflow.apply(me, [count]);\n        };\n        // 构建 notify\n        if (me.config.notify) {\n            me.config.notify.forEach(function (time) {\n                if (time < 1)\n                    throw new Error('由于当结束会调用 finished，所以 notify 通知必须全是正整数');\n                time = time * 1000;\n                time = time - time % me.frequency;\n                me._notify[time] = true;\n            });\n        }\n        me.start.emit();\n        me.timer.add(me.reflow, me.frequency);\n        // show\n        el.style.display = 'inline';\n        return me;\n    };\n    CountdownComponent.prototype.destroy = function () {\n        this.timer.remove(this.reflow);\n        return this;\n    };\n    /**\n     * 更新时钟\n     */\n    /**\n         * 更新时钟\n         */\n    CountdownComponent.prototype.reflow = /**\n         * 更新时钟\n         */\n        function (count, force) {\n            if (count === void 0) {\n                count = 0;\n            }\n            if (force === void 0) {\n                force = false;\n            }\n            if (!force && (this.parsed || this.stoped))\n                return;\n            var me = this;\n            me.left = me.left - me.frequency * count;\n            me.hands.forEach(function (hand) {\n                hand.lastValue = hand.value;\n                hand.value = Math.floor(me.left / hand.base) % hand.radix;\n            });\n            me.repaint();\n            if (me._notify[me.left]) {\n                me.notify.emit(me.left);\n                this.callEvent('notify');\n            }\n            if (me.left < 1) {\n                me.finished.emit(0);\n                this.stoped = true;\n                this.callEvent('finished');\n                this.destroy();\n            }\n        };\n    /**\n     * 重绘时钟\n     */\n    /**\n         * 重绘时钟\n         */\n    CountdownComponent.prototype.repaint = /**\n         * 重绘时钟\n         */\n        function () {\n            var me = this;\n            if (me.config.repaint) {\n                me.config.repaint.apply(me);\n                return;\n            }\n            var content;\n            me.hands.forEach(function (hand) {\n                if (hand.lastValue !== hand.value) {\n                    content = '';\n                    me.toDigitals(hand.value, hand.bits).forEach(function (digital) {\n                        content += me.html(digital.toString(), '', 'digital');\n                    });\n                    hand.node.innerHTML = content;\n                }\n            });\n        };\n    /**\n     * 获取倒计时剩余帧数\n     */\n    /**\n         * 获取倒计时剩余帧数\n         */\n    CountdownComponent.prototype.getLeft = /**\n         * 获取倒计时剩余帧数\n         */\n        function () {\n            var left = this.config.leftTime * 1000;\n            var end = this.config.stopTime;\n            if (!left && end)\n                left = end - new Date().getTime();\n            this.left = left - left % this.frequency;\n        };\n    /**\n     * 生成需要的html代码，辅助工具\n     */\n    /**\n         * 生成需要的html代码，辅助工具\n         */\n    CountdownComponent.prototype.html = /**\n         * 生成需要的html代码，辅助工具\n         */\n        function (con, className, type) {\n            if (con instanceof Array) {\n                con = con.join('');\n            }\n            switch (type) {\n                case 'hand':\n                case 'handlet':\n                    className = type + ' hand-' + className;\n                    break;\n                case 'digital':\n                    if (con === '.') {\n                        className = type + ' ' + type + '-point ' + className;\n                    }\n                    else {\n                        className = type + ' ' + type + '-' + con + ' ' + className;\n                    }\n                    break;\n            }\n            return '<span class=\"' + className + '\">' + con + '</span>';\n        };\n    /**\n     * 把值转换为独立的数字形式\n     */\n    /**\n         * 把值转换为独立的数字形式\n         */\n    CountdownComponent.prototype.toDigitals = /**\n         * 把值转换为独立的数字形式\n         */\n        function (value, bits) {\n            value = value < 0 ? 0 : value;\n            var digitals = [];\n            // 把时、分、秒等换算成数字.\n            while (bits--) {\n                digitals[bits] = value % 10;\n                value = Math.floor(value / 10);\n            }\n            return digitals;\n        };\n    return CountdownComponent;\n}());\nexport { CountdownComponent };\n//# sourceMappingURL=component.js.map \n",null]}